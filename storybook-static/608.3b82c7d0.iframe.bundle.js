"use strict";(self.webpackChunkfleetopia_frontend=self.webpackChunkfleetopia_frontend||[]).push([[608],{"./node_modules/@clerk/nextjs/dist/esm/server/keyless-node.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{createOrReadKeyless:()=>createOrReadKeyless,removeKeyless:()=>removeKeyless,safeParseClerkFile:()=>safeParseClerkFile});__webpack_require__("./node_modules/@clerk/shared/dist/chunk-7ELT755Q.mjs");var chunk_N2V3PKFE=__webpack_require__("./node_modules/@clerk/shared/dist/chunk-N2V3PKFE.mjs"),keys=__webpack_require__("./node_modules/@clerk/shared/dist/keys.mjs"),deprecated=__webpack_require__("./node_modules/@clerk/shared/dist/deprecated.mjs"),dist_error=__webpack_require__("./node_modules/@clerk/shared/dist/error.mjs"),{isDevOrStagingUrl}=((0,dist_error.t5)({packageName:"@clerk/backend"}),(0,keys.MY)()),TokenVerificationErrorCode_InvalidSecretKey="clerk_key_invalid",TokenVerificationErrorReason={TokenExpired:"token-expired",TokenInvalid:"token-invalid",TokenInvalidAlgorithm:"token-invalid-algorithm",TokenInvalidAuthorizedParties:"token-invalid-authorized-parties",TokenInvalidSignature:"token-invalid-signature",TokenNotActiveYet:"token-not-active-yet",TokenIatInTheFuture:"token-iat-in-the-future",TokenVerificationFailed:"token-verification-failed",InvalidSecretKey:"secret-key-invalid",LocalJWKMissing:"jwk-local-missing",RemoteJWKFailedToLoad:"jwk-remote-failed-to-load",RemoteJWKInvalid:"jwk-remote-invalid",RemoteJWKMissing:"jwk-remote-missing",JWKFailedToResolve:"jwk-failed-to-resolve",JWKKidMismatch:"jwk-kid-mismatch"},TokenVerificationErrorAction_ContactSupport="Contact support@clerk.com",TokenVerificationErrorAction_EnsureClerkJWT="Make sure that this is a valid Clerk generate JWT.",TokenVerificationErrorAction_SetClerkJWTKey="Set the CLERK_JWT_KEY environment variable.",TokenVerificationErrorAction_SetClerkSecretKey="Set the CLERK_SECRET_KEY environment variable.",TokenVerificationError=class _TokenVerificationError extends Error{constructor({action,message,reason}){super(message),Object.setPrototypeOf(this,_TokenVerificationError.prototype),this.reason=reason,this.message=message,this.action=action}getFullMessage(){return`${[this.message,this.action].filter(m=>m).join(" ")} (reason=${this.reason}, token-carrier=${this.tokenCarrier})`}},MachineTokenVerificationErrorCode_TokenInvalid="token-invalid",MachineTokenVerificationErrorCode_InvalidSecretKey="secret-key-invalid",MachineTokenVerificationErrorCode_UnexpectedError="unexpected-error",MachineTokenVerificationError=class _MachineTokenVerificationError extends Error{constructor({message,code,status}){super(message),Object.setPrototypeOf(this,_MachineTokenVerificationError.prototype),this.code=code,this.status=status}getFullMessage(){return`${this.message} (code=${this.code}, status=${this.status})`}};const webcrypto=crypto;var chunk_TETGTEI2=__webpack_require__("./node_modules/@clerk/shared/dist/chunk-TETGTEI2.mjs"),globalFetch=fetch.bind(globalThis),runtime={crypto:webcrypto,get fetch(){return globalFetch},AbortController:globalThis.AbortController,Blob:globalThis.Blob,FormData:globalThis.FormData,Headers:globalThis.Headers,Request:globalThis.Request,Response:globalThis.Response},base64url={parse:(string,opts)=>function parse(string,encoding,opts={}){if(!encoding.codes){encoding.codes={};for(let i=0;i<encoding.chars.length;++i)encoding.codes[encoding.chars[i]]=i}if(!opts.loose&&string.length*encoding.bits&7)throw new SyntaxError("Invalid padding");let end=string.length;for(;"="===string[end-1];)if(--end,!(opts.loose||(string.length-end)*encoding.bits&7))throw new SyntaxError("Invalid padding");const out=new(opts.out??Uint8Array)(end*encoding.bits/8|0);let bits=0,buffer=0,written=0;for(let i=0;i<end;++i){const value=encoding.codes[string[i]];if(void 0===value)throw new SyntaxError("Invalid character "+string[i]);buffer=buffer<<encoding.bits|value,bits+=encoding.bits,bits>=8&&(bits-=8,out[written++]=255&buffer>>bits)}if(bits>=encoding.bits||255&buffer<<8-bits)throw new SyntaxError("Unexpected end of data");return out}(string,base64UrlEncoding,opts),stringify:(data,opts)=>function stringify(data,encoding,opts={}){const{pad=!0}=opts,mask=(1<<encoding.bits)-1;let out="",bits=0,buffer=0;for(let i=0;i<data.length;++i)for(buffer=buffer<<8|255&data[i],bits+=8;bits>encoding.bits;)bits-=encoding.bits,out+=encoding.chars[mask&buffer>>bits];bits&&(out+=encoding.chars[mask&buffer<<encoding.bits-bits]);if(pad)for(;out.length*encoding.bits&7;)out+="=";return out}(data,base64UrlEncoding,opts)},base64UrlEncoding={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bits:6};var algToHash={RS256:"SHA-256",RS384:"SHA-384",RS512:"SHA-512"},jwksAlgToCryptoAlg={RS256:"RSASSA-PKCS1-v1_5",RS384:"RSASSA-PKCS1-v1_5",RS512:"RSASSA-PKCS1-v1_5"},algs=Object.keys(algToHash);var assertAudienceClaim=(aud,audience)=>{const audienceList=[audience].flat().filter(a=>!!a),audList=[aud].flat().filter(a=>!!a);if(audienceList.length>0&&audList.length>0)if("string"==typeof aud){if(!audienceList.includes(aud))throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Is not included in "${JSON.stringify(audienceList)}".`})}else if((s=>Array.isArray(s)&&s.length>0&&s.every(a=>"string"==typeof a))(aud)&&!aud.some(a=>audienceList.includes(a)))throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Invalid JWT audience claim array (aud) ${JSON.stringify(aud)}. Is not included in "${JSON.stringify(audienceList)}".`})},assertHeaderType=typ=>{if(void 0!==typ&&"JWT"!==typ)throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenInvalid,message:`Invalid JWT type ${JSON.stringify(typ)}. Expected "JWT".`})},assertHeaderAlgorithm=alg=>{if(!algs.includes(alg))throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenInvalidAlgorithm,message:`Invalid JWT algorithm ${JSON.stringify(alg)}. Supported: ${algs}.`})};function importKey(key,algorithm,keyUsage){if("object"==typeof key)return runtime.crypto.subtle.importKey("jwk",key,algorithm,!1,[keyUsage]);const keyData=function pemToBuffer(secret){const trimmed=secret.replace(/-----BEGIN.*?-----/g,"").replace(/-----END.*?-----/g,"").replace(/\s/g,""),decoded=(0,chunk_TETGTEI2.S)(trimmed),buffer=new ArrayBuffer(decoded.length),bufView=new Uint8Array(buffer);for(let i=0,strLen=decoded.length;i<strLen;i++)bufView[i]=decoded.charCodeAt(i);return bufView}(key),format="sign"===keyUsage?"pkcs8":"spki";return runtime.crypto.subtle.importKey(format,keyData,algorithm,!1,[keyUsage])}async function hasValidSignature(jwt,key){const{header,signature,raw}=jwt,data=(new TextEncoder).encode([raw.header,raw.payload].join(".")),algorithm=function getCryptoAlgorithm(algorithmName){if(!algToHash[algorithmName]||!jwksAlgToCryptoAlg[algorithmName])throw new Error(`Unsupported algorithm ${algorithmName}, expected one of ${algs.join(",")}.`);return{hash:{name:algToHash[algorithmName]},name:jwksAlgToCryptoAlg[algorithmName]}}(header.alg);try{const cryptoKey=await importKey(key,algorithm,"verify");return{data:await runtime.crypto.subtle.verify(algorithm.name,cryptoKey,signature,data)}}catch(error){return{errors:[new TokenVerificationError({reason:TokenVerificationErrorReason.TokenInvalidSignature,message:error?.message})]}}}function decodeJwt(token){const tokenParts=(token||"").toString().split(".");if(3!==tokenParts.length)return{errors:[new TokenVerificationError({reason:TokenVerificationErrorReason.TokenInvalid,message:"Invalid JWT form. A JWT consists of three parts separated by dots."})]};const[rawHeader,rawPayload,rawSignature]=tokenParts,decoder=new TextDecoder;return{data:{header:JSON.parse(decoder.decode(base64url.parse(rawHeader,{loose:!0}))),payload:JSON.parse(decoder.decode(base64url.parse(rawPayload,{loose:!0}))),signature:base64url.parse(rawSignature,{loose:!0}),raw:{header:rawHeader,payload:rawPayload,signature:rawSignature,text:token}}}}async function verifyJwt(token,options){const{audience,authorizedParties,clockSkewInMs,key}=options,clockSkew=clockSkewInMs||5e3,{data:decoded,errors}=decodeJwt(token);if(errors)return{errors};const{header,payload}=decoded;try{const{typ,alg}=header;assertHeaderType(typ),assertHeaderAlgorithm(alg);const{azp,sub,aud,iat,exp,nbf}=payload;(sub=>{if("string"!=typeof sub)throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Subject claim (sub) is required and must be a string. Received ${JSON.stringify(sub)}.`})})(sub),assertAudienceClaim([aud],[audience]),((azp,authorizedParties)=>{if(azp&&authorizedParties&&0!==authorizedParties.length&&!authorizedParties.includes(azp))throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenInvalidAuthorizedParties,message:`Invalid JWT Authorized party claim (azp) ${JSON.stringify(azp)}. Expected "${authorizedParties}".`})})(azp,authorizedParties),((exp,clockSkewInMs)=>{if("number"!=typeof exp)throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Invalid JWT expiry date claim (exp) ${JSON.stringify(exp)}. Expected number.`});const currentDate=new Date(Date.now()),expiryDate=new Date(0);if(expiryDate.setUTCSeconds(exp),expiryDate.getTime()<=currentDate.getTime()-clockSkewInMs)throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenExpired,message:`JWT is expired. Expiry date: ${expiryDate.toUTCString()}, Current date: ${currentDate.toUTCString()}.`})})(exp,clockSkew),((nbf,clockSkewInMs)=>{if(void 0===nbf)return;if("number"!=typeof nbf)throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Invalid JWT not before date claim (nbf) ${JSON.stringify(nbf)}. Expected number.`});const currentDate=new Date(Date.now()),notBeforeDate=new Date(0);if(notBeforeDate.setUTCSeconds(nbf),notBeforeDate.getTime()>currentDate.getTime()+clockSkewInMs)throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenNotActiveYet,message:`JWT cannot be used prior to not before date claim (nbf). Not before date: ${notBeforeDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`})})(nbf,clockSkew),((iat,clockSkewInMs)=>{if(void 0===iat)return;if("number"!=typeof iat)throw new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Invalid JWT issued at date claim (iat) ${JSON.stringify(iat)}. Expected number.`});const currentDate=new Date(Date.now()),issuedAtDate=new Date(0);if(issuedAtDate.setUTCSeconds(iat),issuedAtDate.getTime()>currentDate.getTime()+clockSkewInMs)throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenIatInTheFuture,message:`JWT issued at date claim (iat) is in the future. Issued at date: ${issuedAtDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`})})(iat,clockSkew)}catch(err){return{errors:[err]}}const{data:signatureValid,errors:signatureErrors}=await hasValidSignature(decoded,key);return signatureErrors?{errors:[new TokenVerificationError({action:TokenVerificationErrorAction_EnsureClerkJWT,reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Error verifying JWT signature. ${signatureErrors[0]}`})]}:signatureValid?{data:payload}:{errors:[new TokenVerificationError({reason:TokenVerificationErrorReason.TokenInvalidSignature,message:"JWT signature is invalid."})]}}var __typeError=msg=>{throw TypeError(msg)},__privateMethod=(obj,member,method)=>(((obj,member,msg)=>{member.has(obj)||__typeError("Cannot "+msg)})(obj,member,"access private method"),method);var authorization=__webpack_require__("./node_modules/@clerk/shared/dist/authorization.mjs"),chunk_3CN5LOSN=__webpack_require__("./node_modules/@clerk/shared/dist/chunk-3CN5LOSN.mjs");var __experimental_JWTPayloadToAuthObjectProperties=claims=>{let orgId,orgRole,orgSlug,orgPermissions;const factorVerificationAge=claims.fva??null,sessionStatus=claims.sts??null;if(2===claims.v){if(claims.o){orgId=claims.o?.id,orgSlug=claims.o?.slg,claims.o?.rol&&(orgRole=`org:${claims.o?.rol}`);const{org}=(0,chunk_3CN5LOSN.Ly)(claims.fea),{permissions,featurePermissionMap}=(({per,fpm})=>{if(!per||!fpm)return{permissions:[],featurePermissionMap:[]};const permissions=per.split(",").map(p=>p.trim()),featurePermissionMap=fpm.split(",").map(permission=>Number.parseInt(permission.trim(),10)).map(permission=>permission.toString(2).padStart(permissions.length,"0").split("").map(bit=>Number.parseInt(bit,10)).reverse()).filter(Boolean);return{permissions,featurePermissionMap}})({per:claims.o?.per,fpm:claims.o?.fpm});orgPermissions=function buildOrgPermissions({features,permissions,featurePermissionMap}){if(!features||!permissions||!featurePermissionMap)return[];const orgPermissions=[];for(let featureIndex=0;featureIndex<features.length;featureIndex++){const feature=features[featureIndex];if(featureIndex>=featurePermissionMap.length)continue;const permissionBits=featurePermissionMap[featureIndex];if(permissionBits)for(let permIndex=0;permIndex<permissionBits.length;permIndex++)1===permissionBits[permIndex]&&orgPermissions.push(`org:${feature}:${permissions[permIndex]}`)}return orgPermissions}({features:org,featurePermissionMap,permissions})}}else orgId=claims.org_id,orgRole=claims.org_role,orgSlug=claims.org_slug,orgPermissions=claims.org_permissions;return{sessionClaims:claims,sessionId:claims.sid,sessionStatus,actor:claims.act,userId:claims.sub,orgId,orgRole,orgSlug,orgPermissions,factorVerificationAge}},dist=__webpack_require__("./node_modules/cookie/dist/index.js");function F(r,n){void 0===n&&(n={});for(var e=function _(r){for(var n=[],e=0;e<r.length;){var a=r[e];if("*"!==a&&"+"!==a&&"?"!==a)if("\\"!==a)if("{"!==a)if("}"!==a)if(":"!==a)if("("!==a)n.push({type:"CHAR",index:e,value:r[e++]});else{var o=1,m="";if("?"===r[t=e+1])throw new TypeError('Pattern cannot start with "?" at '.concat(t));for(;t<r.length;)if("\\"!==r[t]){if(")"===r[t]){if(0===--o){t++;break}}else if("("===r[t]&&(o++,"?"!==r[t+1]))throw new TypeError("Capturing groups are not allowed at ".concat(t));m+=r[t++]}else m+=r[t++]+r[t++];if(o)throw new TypeError("Unbalanced pattern at ".concat(e));if(!m)throw new TypeError("Missing pattern at ".concat(e));n.push({type:"PATTERN",index:e,value:m}),e=t}else{for(var u="",t=e+1;t<r.length;){var c=r.charCodeAt(t);if(!(c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122||95===c))break;u+=r[t++]}if(!u)throw new TypeError("Missing parameter name at ".concat(e));n.push({type:"NAME",index:e,value:u}),e=t}else n.push({type:"CLOSE",index:e,value:r[e++]});else n.push({type:"OPEN",index:e,value:r[e++]});else n.push({type:"ESCAPED_CHAR",index:e++,value:r[e++]});else n.push({type:"MODIFIER",index:e,value:r[e++]})}return n.push({type:"END",index:e,value:""}),n}(r),a=n.prefixes,u=void 0===a?"./":a,t=n.delimiter,c=void 0===t?"/#?":t,o=[],m=0,h=0,p="",f=function(l){if(h<e.length&&e[h].type===l)return e[h++].value},w=function(l){var v=f(l);if(void 0!==v)return v;var E=e[h],N=E.type,S=E.index;throw new TypeError("Unexpected ".concat(N," at ").concat(S,", expected ").concat(l))},d=function(){for(var v,l="";v=f("CHAR")||f("ESCAPED_CHAR");)l+=v;return l},A=function(l){var v=o[o.length-1],E=l||(v&&"string"==typeof v?v:"");if(v&&!E)throw new TypeError('Must have text between two parameters, missing text after "'.concat(v.name,'"'));return!E||function(l){for(var v=0,E=c;v<E.length;v++){var N=E[v];if(l.indexOf(N)>-1)return!0}return!1}(E)?"[^".concat(s(c),"]+?"):"(?:(?!".concat(s(E),")[^").concat(s(c),"])+?")};h<e.length;){var T=f("CHAR"),x=f("NAME"),C=f("PATTERN");if(x||C){var g=T||"";-1===u.indexOf(g)&&(p+=g,g=""),p&&(o.push(p),p=""),o.push({name:x||m++,prefix:g,suffix:"",pattern:C||A(g),modifier:f("MODIFIER")||""})}else{var i=T||f("ESCAPED_CHAR");if(i)p+=i;else if(p&&(o.push(p),p=""),f("OPEN")){g=d();var y=f("NAME")||"",O=f("PATTERN")||"",b=d();w("CLOSE"),o.push({name:y||(O?m++:""),pattern:y&&!O?A(g):O,prefix:g,suffix:b,modifier:f("MODIFIER")||""})}else w("END")}}return o}function H(r,n){var e=[];return function I(r,n,e){void 0===e&&(e={});var a=e.decode,u=void 0===a?function(t){return t}:a;return function(t){var c=r.exec(t);if(!c)return!1;for(var o=c[0],m=c.index,h=Object.create(null),p=function(w){if(void 0===c[w])return"continue";var d=n[w-1];"*"===d.modifier||"+"===d.modifier?h[d.name]=c[w].split(d.prefix+d.suffix).map(function(M){return u(M,d)}):h[d.name]=u(c[w],d)},f=1;f<c.length;f++)p(f);return{path:o,index:m,params:h}}}(P(r,e,n),e,n)}function s(r){return r.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function D(r){return r&&r.sensitive?"":"i"}function L(r,n,e){return function U(r,n,e){void 0===e&&(e={});for(var a=e.strict,u=void 0!==a&&a,t=e.start,c=void 0===t||t,o=e.end,m=void 0===o||o,h=e.encode,p=void 0===h?function(v){return v}:h,f=e.delimiter,w=void 0===f?"/#?":f,d=e.endsWith,A="[".concat(s(void 0===d?"":d),"]|$"),T="[".concat(s(w),"]"),x=c?"^":"",C=0,g=r;C<g.length;C++){var i=g[C];if("string"==typeof i)x+=s(p(i));else{var R=s(p(i.prefix)),y=s(p(i.suffix));if(i.pattern)if(n&&n.push(i),R||y)if("+"===i.modifier||"*"===i.modifier){var O="*"===i.modifier?"?":"";x+="(?:".concat(R,"((?:").concat(i.pattern,")(?:").concat(y).concat(R,"(?:").concat(i.pattern,"))*)").concat(y,")").concat(O)}else x+="(?:".concat(R,"(").concat(i.pattern,")").concat(y,")").concat(i.modifier);else{if("+"===i.modifier||"*"===i.modifier)throw new TypeError('Can not repeat "'.concat(i.name,'" without a prefix and suffix'));x+="(".concat(i.pattern,")").concat(i.modifier)}else x+="(?:".concat(R).concat(y,")").concat(i.modifier)}}if(m)u||(x+="".concat(T,"?")),x+=e.endsWith?"(?=".concat(A,")"):"$";else{var b=r[r.length-1],l="string"==typeof b?T.indexOf(b[b.length-1])>-1:void 0===b;u||(x+="(?:".concat(T,"(?=").concat(A,"))?")),l||(x+="(?=".concat(T,"|").concat(A,")"))}return new RegExp(x,D(e))}(F(r,e),n,e)}function P(r,n,e){return r instanceof RegExp?function $(r,n){if(!n)return r;for(var e=/\((?:\?<(.*?)>)?(?!\?)/g,a=0,u=e.exec(r.source);u;)n.push({name:u[1]||a++,prefix:"",suffix:"",modifier:"",pattern:""}),u=e.exec(r.source);return r}(r,n):Array.isArray(r)?function W(r,n,e){var a=r.map(function(u){return P(u,n,e).source});return new RegExp("(?:".concat(a.join("|"),")"),D(e))}(r,n,e):L(r,n,e)}var console=__webpack_require__("./node_modules/console-browserify/index.js"),API_URL="https://api.clerk.com",API_VERSION="v1",USER_AGENT="@clerk/backend@2.7.0",Cookies={Session:"__session",Refresh:"__refresh",ClientUat:"__client_uat",Handshake:"__clerk_handshake",DevBrowser:"__clerk_db_jwt",RedirectCount:"__clerk_redirect_count",HandshakeNonce:"__clerk_handshake_nonce"},constants={Attributes:{AuthToken:"__clerkAuthToken",AuthSignature:"__clerkAuthSignature",AuthStatus:"__clerkAuthStatus",AuthReason:"__clerkAuthReason",AuthMessage:"__clerkAuthMessage",ClerkUrl:"__clerkUrl"},Cookies,Headers:{Accept:"accept",AuthMessage:"x-clerk-auth-message",Authorization:"authorization",AuthReason:"x-clerk-auth-reason",AuthSignature:"x-clerk-auth-signature",AuthStatus:"x-clerk-auth-status",AuthToken:"x-clerk-auth-token",CacheControl:"cache-control",ClerkRedirectTo:"x-clerk-redirect-to",ClerkRequestData:"x-clerk-request-data",ClerkUrl:"x-clerk-clerk-url",CloudFrontForwardedProto:"cloudfront-forwarded-proto",ContentType:"content-type",ContentSecurityPolicy:"content-security-policy",ContentSecurityPolicyReportOnly:"content-security-policy-report-only",EnableDebug:"x-clerk-debug",ForwardedHost:"x-forwarded-host",ForwardedPort:"x-forwarded-port",ForwardedProto:"x-forwarded-proto",Host:"host",Location:"location",Nonce:"x-nonce",Origin:"origin",Referrer:"referer",SecFetchDest:"sec-fetch-dest",SecFetchSite:"sec-fetch-site",UserAgent:"user-agent",ReportingEndpoints:"reporting-endpoints"},ContentTypes:{Json:"application/json"},QueryParameters:{ClerkSynced:"__clerk_synced",SuffixedCookies:"suffixed_cookies",ClerkRedirectUrl:"__clerk_redirect_url",DevBrowser:Cookies.DevBrowser,Handshake:Cookies.Handshake,HandshakeHelp:"__clerk_help",LegacyDevBrowser:"__dev_session",HandshakeReason:"__clerk_hs_reason",HandshakeNonce:Cookies.HandshakeNonce,HandshakeFormat:"format"}};function mergePreDefinedOptions(preDefinedOptions,options){return Object.keys(preDefinedOptions).reduce((obj,key)=>({...obj,[key]:options[key]||obj[key]}),{...preDefinedOptions})}function assertValidSecretKey(val){if(!val||"string"!=typeof val)throw Error("Missing Clerk Secret Key. Go to https://dashboard.clerk.com and get your key for your instance.")}var TokenType_SessionToken="session_token",TokenType_ApiKey="api_key",TokenType_M2MToken="m2m_token",TokenType_OAuthToken="oauth_token",AuthenticateContext=class{constructor(cookieSuffix,clerkRequest,options){this.cookieSuffix=cookieSuffix,this.clerkRequest=clerkRequest,this.originalFrontendApi="",options.acceptsToken===TokenType_M2MToken||options.acceptsToken===TokenType_ApiKey?this.initHeaderValues():(this.initPublishableKeyValues(options),this.initHeaderValues(),this.initCookieValues(),this.initHandshakeValues()),Object.assign(this,options),this.clerkUrl=this.clerkRequest.clerkUrl}get sessionToken(){return this.sessionTokenInCookie||this.tokenInHeader}usesSuffixedCookies(){const suffixedClientUat=this.getSuffixedCookie(constants.Cookies.ClientUat),clientUat=this.getCookie(constants.Cookies.ClientUat),suffixedSession=this.getSuffixedCookie(constants.Cookies.Session)||"",session=this.getCookie(constants.Cookies.Session)||"";if(session&&!this.tokenHasIssuer(session))return!1;if(session&&!this.tokenBelongsToInstance(session))return!0;if(!suffixedClientUat&&!suffixedSession)return!1;const{data:sessionData}=decodeJwt(session),sessionIat=sessionData?.payload.iat||0,{data:suffixedSessionData}=decodeJwt(suffixedSession),suffixedSessionIat=suffixedSessionData?.payload.iat||0;if("0"!==suffixedClientUat&&"0"!==clientUat&&sessionIat>suffixedSessionIat)return!1;if("0"===suffixedClientUat&&"0"!==clientUat)return!1;if("production"!==this.instanceType){const isSuffixedSessionExpired=this.sessionExpired(suffixedSessionData);if("0"!==suffixedClientUat&&"0"===clientUat&&isSuffixedSessionExpired)return!1}return!(!suffixedClientUat&&suffixedSession)}isCrossOriginReferrer(){if(!this.referrer||!this.clerkUrl.origin)return!1;try{if("cross-site"===this.getHeader(constants.Headers.SecFetchSite))return!0;return new URL(this.referrer).origin!==this.clerkUrl.origin}catch{return!1}}initPublishableKeyValues(options){!function assertValidPublishableKey(val){(0,keys.nQ)(val,{fatal:!0})}(options.publishableKey),this.publishableKey=options.publishableKey;const originalPk=(0,keys.nQ)(this.publishableKey,{fatal:!0,domain:options.domain,isSatellite:options.isSatellite});this.originalFrontendApi=originalPk.frontendApi;const pk=(0,keys.nQ)(this.publishableKey,{fatal:!0,proxyUrl:options.proxyUrl,domain:options.domain,isSatellite:options.isSatellite});this.instanceType=pk.instanceType,this.frontendApi=pk.frontendApi}initHeaderValues(){this.tokenInHeader=this.parseAuthorizationHeader(this.getHeader(constants.Headers.Authorization)),this.origin=this.getHeader(constants.Headers.Origin),this.host=this.getHeader(constants.Headers.Host),this.forwardedHost=this.getHeader(constants.Headers.ForwardedHost),this.forwardedProto=this.getHeader(constants.Headers.CloudFrontForwardedProto)||this.getHeader(constants.Headers.ForwardedProto),this.referrer=this.getHeader(constants.Headers.Referrer),this.userAgent=this.getHeader(constants.Headers.UserAgent),this.secFetchDest=this.getHeader(constants.Headers.SecFetchDest),this.accept=this.getHeader(constants.Headers.Accept)}initCookieValues(){this.sessionTokenInCookie=this.getSuffixedOrUnSuffixedCookie(constants.Cookies.Session),this.refreshTokenInCookie=this.getSuffixedCookie(constants.Cookies.Refresh),this.clientUat=Number.parseInt(this.getSuffixedOrUnSuffixedCookie(constants.Cookies.ClientUat)||"")||0}initHandshakeValues(){this.devBrowserToken=this.getQueryParam(constants.QueryParameters.DevBrowser)||this.getSuffixedOrUnSuffixedCookie(constants.Cookies.DevBrowser),this.handshakeToken=this.getQueryParam(constants.QueryParameters.Handshake)||this.getCookie(constants.Cookies.Handshake),this.handshakeRedirectLoopCounter=Number(this.getCookie(constants.Cookies.RedirectCount))||0,this.handshakeNonce=this.getQueryParam(constants.QueryParameters.HandshakeNonce)||this.getCookie(constants.Cookies.HandshakeNonce)}getQueryParam(name){return this.clerkRequest.clerkUrl.searchParams.get(name)}getHeader(name){return this.clerkRequest.headers.get(name)||void 0}getCookie(name){return this.clerkRequest.cookies.get(name)||void 0}getSuffixedCookie(name){return this.getCookie((0,keys._d)(name,this.cookieSuffix))||void 0}getSuffixedOrUnSuffixedCookie(cookieName){return this.usesSuffixedCookies()?this.getSuffixedCookie(cookieName):this.getCookie(cookieName)}parseAuthorizationHeader(authorizationHeader){if(!authorizationHeader)return;const[scheme,token]=authorizationHeader.split(" ",2);return token?"Bearer"===scheme?token:void 0:scheme}tokenHasIssuer(token){const{data,errors}=decodeJwt(token);return!errors&&!!data.payload.iss}tokenBelongsToInstance(token){if(!token)return!1;const{data,errors}=decodeJwt(token);if(errors)return!1;const tokenIssuer=data.payload.iss.replace(/https?:\/\//gi,"");return this.originalFrontendApi===tokenIssuer}sessionExpired(jwt){return!!jwt&&jwt?.payload.exp<=(Date.now()/1e3|0)}},MULTIPLE_SEPARATOR_REGEX=new RegExp("(?<!:)/{1,}","g");function joinPaths(...args){return args.filter(p=>p).join("/").replace(MULTIPLE_SEPARATOR_REGEX,"/")}var _M2MTokenApi_instances,createRequestOptions_fn,AbstractAPI=class{constructor(request){this.request=request}requireId(id){if(!id)throw new Error("A valid resource ID is required.")}},ActorTokenAPI=class extends AbstractAPI{async create(params){return this.request({method:"POST",path:"/actor_tokens",bodyParams:params})}async revoke(actorTokenId){return this.requireId(actorTokenId),this.request({method:"POST",path:joinPaths("/actor_tokens",actorTokenId,"revoke")})}},AccountlessApplicationAPI=class extends AbstractAPI{async createAccountlessApplication(params){const headerParams=params?.requestHeaders?Object.fromEntries(params.requestHeaders.entries()):void 0;return this.request({method:"POST",path:"/accountless_applications",headerParams})}async completeAccountlessApplicationOnboarding(params){const headerParams=params?.requestHeaders?Object.fromEntries(params.requestHeaders.entries()):void 0;return this.request({method:"POST",path:joinPaths("/accountless_applications","complete"),headerParams})}},basePath3="/allowlist_identifiers",AllowlistIdentifierAPI=class extends AbstractAPI{async getAllowlistIdentifierList(params={}){return this.request({method:"GET",path:basePath3,queryParams:{...params,paginated:!0}})}async createAllowlistIdentifier(params){return this.request({method:"POST",path:basePath3,bodyParams:params})}async deleteAllowlistIdentifier(allowlistIdentifierId){return this.requireId(allowlistIdentifierId),this.request({method:"DELETE",path:joinPaths(basePath3,allowlistIdentifierId)})}},APIKeysAPI=class extends AbstractAPI{async create(params){return this.request({method:"POST",path:"/api_keys",bodyParams:params})}async revoke(params){const{apiKeyId,...bodyParams}=params;return this.requireId(apiKeyId),this.request({method:"POST",path:joinPaths("/api_keys",apiKeyId,"revoke"),bodyParams})}async getSecret(apiKeyId){return this.requireId(apiKeyId),this.request({method:"GET",path:joinPaths("/api_keys",apiKeyId,"secret")})}async verifySecret(secret){return this.request({method:"POST",path:joinPaths("/api_keys","verify"),bodyParams:{secret}})}},BetaFeaturesAPI=class extends AbstractAPI{async changeDomain(params){return this.request({method:"POST",path:joinPaths("/beta_features","change_domain"),bodyParams:params})}},basePath6="/blocklist_identifiers",BlocklistIdentifierAPI=class extends AbstractAPI{async getBlocklistIdentifierList(params={}){return this.request({method:"GET",path:basePath6,queryParams:params})}async createBlocklistIdentifier(params){return this.request({method:"POST",path:basePath6,bodyParams:params})}async deleteBlocklistIdentifier(blocklistIdentifierId){return this.requireId(blocklistIdentifierId),this.request({method:"DELETE",path:joinPaths(basePath6,blocklistIdentifierId)})}},ClientAPI=class extends AbstractAPI{async getClientList(params={}){return this.request({method:"GET",path:"/clients",queryParams:{...params,paginated:!0}})}async getClient(clientId){return this.requireId(clientId),this.request({method:"GET",path:joinPaths("/clients",clientId)})}verifyClient(token){return this.request({method:"POST",path:joinPaths("/clients","verify"),bodyParams:{token}})}async getHandshakePayload(queryParams){return this.request({method:"GET",path:joinPaths("/clients","handshake_payload"),queryParams})}},DomainAPI=class extends AbstractAPI{async list(){return this.request({method:"GET",path:"/domains"})}async add(params){return this.request({method:"POST",path:"/domains",bodyParams:params})}async update(params){const{domainId,...bodyParams}=params;return this.requireId(domainId),this.request({method:"PATCH",path:joinPaths("/domains",domainId),bodyParams})}async delete(satelliteDomainId){return this.deleteDomain(satelliteDomainId)}async deleteDomain(satelliteDomainId){return this.requireId(satelliteDomainId),this.request({method:"DELETE",path:joinPaths("/domains",satelliteDomainId)})}},basePath9="/email_addresses",EmailAddressAPI=class extends AbstractAPI{async getEmailAddress(emailAddressId){return this.requireId(emailAddressId),this.request({method:"GET",path:joinPaths(basePath9,emailAddressId)})}async createEmailAddress(params){return this.request({method:"POST",path:basePath9,bodyParams:params})}async updateEmailAddress(emailAddressId,params={}){return this.requireId(emailAddressId),this.request({method:"PATCH",path:joinPaths(basePath9,emailAddressId),bodyParams:params})}async deleteEmailAddress(emailAddressId){return this.requireId(emailAddressId),this.request({method:"DELETE",path:joinPaths(basePath9,emailAddressId)})}},IdPOAuthAccessTokenApi=class extends AbstractAPI{async verifyAccessToken(accessToken){return this.request({method:"POST",path:joinPaths("/oauth_applications/access_tokens","verify"),bodyParams:{access_token:accessToken}})}},InstanceAPI=class extends AbstractAPI{async get(){return this.request({method:"GET",path:"/instance"})}async update(params){return this.request({method:"PATCH",path:"/instance",bodyParams:params})}async updateRestrictions(params){return this.request({method:"PATCH",path:joinPaths("/instance","restrictions"),bodyParams:params})}async updateOrganizationSettings(params){return this.request({method:"PATCH",path:joinPaths("/instance","organization_settings"),bodyParams:params})}},InvitationAPI=class extends AbstractAPI{async getInvitationList(params={}){return this.request({method:"GET",path:"/invitations",queryParams:{...params,paginated:!0}})}async createInvitation(params){return this.request({method:"POST",path:"/invitations",bodyParams:params})}async revokeInvitation(invitationId){return this.requireId(invitationId),this.request({method:"POST",path:joinPaths("/invitations",invitationId,"revoke")})}},MachineApi=class extends AbstractAPI{async get(machineId){return this.requireId(machineId),this.request({method:"GET",path:joinPaths("/machines",machineId)})}async list(queryParams={}){return this.request({method:"GET",path:"/machines",queryParams})}async create(bodyParams){return this.request({method:"POST",path:"/machines",bodyParams})}async update(params){const{machineId,...bodyParams}=params;return this.requireId(machineId),this.request({method:"PATCH",path:joinPaths("/machines",machineId),bodyParams})}async delete(machineId){return this.requireId(machineId),this.request({method:"DELETE",path:joinPaths("/machines",machineId)})}async getSecretKey(machineId){return this.requireId(machineId),this.request({method:"GET",path:joinPaths("/machines",machineId,"secret_key")})}async createScope(machineId,toMachineId){return this.requireId(machineId),this.request({method:"POST",path:joinPaths("/machines",machineId,"scopes"),bodyParams:{toMachineId}})}async deleteScope(machineId,otherMachineId){return this.requireId(machineId),this.request({method:"DELETE",path:joinPaths("/machines",machineId,"scopes",otherMachineId)})}},M2MTokenApi=class extends AbstractAPI{constructor(){var obj,member,value;super(...arguments),obj=this,(member=_M2MTokenApi_instances).has(obj)?__typeError("Cannot add the same private member more than once"):member instanceof WeakSet?member.add(obj):member.set(obj,value)}async create(params){const{claims=null,machineSecretKey,secondsUntilExpiration=null}=params||{},requestOptions=__privateMethod(this,_M2MTokenApi_instances,createRequestOptions_fn).call(this,{method:"POST",path:"/m2m_tokens",bodyParams:{secondsUntilExpiration,claims}},machineSecretKey);return this.request(requestOptions)}async revoke(params){const{m2mTokenId,revocationReason=null,machineSecretKey}=params;this.requireId(m2mTokenId);const requestOptions=__privateMethod(this,_M2MTokenApi_instances,createRequestOptions_fn).call(this,{method:"POST",path:joinPaths("/m2m_tokens",m2mTokenId,"revoke"),bodyParams:{revocationReason}},machineSecretKey);return this.request(requestOptions)}async verifySecret(params){const{secret,machineSecretKey}=params,requestOptions=__privateMethod(this,_M2MTokenApi_instances,createRequestOptions_fn).call(this,{method:"POST",path:joinPaths("/m2m_tokens","verify"),bodyParams:{secret}},machineSecretKey);return this.request(requestOptions)}};_M2MTokenApi_instances=new WeakSet,createRequestOptions_fn=function(options,machineSecretKey){return machineSecretKey?{...options,headerParams:{...options.headerParams,Authorization:`Bearer ${machineSecretKey}`}}:options};var JwksAPI=class extends AbstractAPI{async getJwks(){return this.request({method:"GET",path:"/jwks"})}},basePath16="/jwt_templates",JwtTemplatesApi=class extends AbstractAPI{async list(params={}){return this.request({method:"GET",path:basePath16,queryParams:{...params,paginated:!0}})}async get(templateId){return this.requireId(templateId),this.request({method:"GET",path:joinPaths(basePath16,templateId)})}async create(params){return this.request({method:"POST",path:basePath16,bodyParams:params})}async update(params){const{templateId,...bodyParams}=params;return this.requireId(templateId),this.request({method:"PATCH",path:joinPaths(basePath16,templateId),bodyParams})}async delete(templateId){return this.requireId(templateId),this.request({method:"DELETE",path:joinPaths(basePath16,templateId)})}},basePath17="/organizations",OrganizationAPI=class extends AbstractAPI{async getOrganizationList(params){return this.request({method:"GET",path:basePath17,queryParams:params})}async createOrganization(params){return this.request({method:"POST",path:basePath17,bodyParams:params})}async getOrganization(params){const{includeMembersCount}=params,organizationIdOrSlug="organizationId"in params?params.organizationId:params.slug;return this.requireId(organizationIdOrSlug),this.request({method:"GET",path:joinPaths(basePath17,organizationIdOrSlug),queryParams:{includeMembersCount}})}async updateOrganization(organizationId,params){return this.requireId(organizationId),this.request({method:"PATCH",path:joinPaths(basePath17,organizationId),bodyParams:params})}async updateOrganizationLogo(organizationId,params){this.requireId(organizationId);const formData=new runtime.FormData;return formData.append("file",params?.file),params?.uploaderUserId&&formData.append("uploader_user_id",params?.uploaderUserId),this.request({method:"PUT",path:joinPaths(basePath17,organizationId,"logo"),formData})}async deleteOrganizationLogo(organizationId){return this.requireId(organizationId),this.request({method:"DELETE",path:joinPaths(basePath17,organizationId,"logo")})}async updateOrganizationMetadata(organizationId,params){return this.requireId(organizationId),this.request({method:"PATCH",path:joinPaths(basePath17,organizationId,"metadata"),bodyParams:params})}async deleteOrganization(organizationId){return this.request({method:"DELETE",path:joinPaths(basePath17,organizationId)})}async getOrganizationMembershipList(params){const{organizationId,...queryParams}=params;return this.requireId(organizationId),this.request({method:"GET",path:joinPaths(basePath17,organizationId,"memberships"),queryParams})}async getInstanceOrganizationMembershipList(params){return this.request({method:"GET",path:"/organization_memberships",queryParams:params})}async createOrganizationMembership(params){const{organizationId,...bodyParams}=params;return this.requireId(organizationId),this.request({method:"POST",path:joinPaths(basePath17,organizationId,"memberships"),bodyParams})}async updateOrganizationMembership(params){const{organizationId,userId,...bodyParams}=params;return this.requireId(organizationId),this.request({method:"PATCH",path:joinPaths(basePath17,organizationId,"memberships",userId),bodyParams})}async updateOrganizationMembershipMetadata(params){const{organizationId,userId,...bodyParams}=params;return this.request({method:"PATCH",path:joinPaths(basePath17,organizationId,"memberships",userId,"metadata"),bodyParams})}async deleteOrganizationMembership(params){const{organizationId,userId}=params;return this.requireId(organizationId),this.request({method:"DELETE",path:joinPaths(basePath17,organizationId,"memberships",userId)})}async getOrganizationInvitationList(params){const{organizationId,...queryParams}=params;return this.requireId(organizationId),this.request({method:"GET",path:joinPaths(basePath17,organizationId,"invitations"),queryParams})}async createOrganizationInvitation(params){const{organizationId,...bodyParams}=params;return this.requireId(organizationId),this.request({method:"POST",path:joinPaths(basePath17,organizationId,"invitations"),bodyParams})}async createOrganizationInvitationBulk(organizationId,params){return this.requireId(organizationId),this.request({method:"POST",path:joinPaths(basePath17,organizationId,"invitations","bulk"),bodyParams:params})}async getOrganizationInvitation(params){const{organizationId,invitationId}=params;return this.requireId(organizationId),this.requireId(invitationId),this.request({method:"GET",path:joinPaths(basePath17,organizationId,"invitations",invitationId)})}async revokeOrganizationInvitation(params){const{organizationId,invitationId,...bodyParams}=params;return this.requireId(organizationId),this.request({method:"POST",path:joinPaths(basePath17,organizationId,"invitations",invitationId,"revoke"),bodyParams})}async getOrganizationDomainList(params){const{organizationId,...queryParams}=params;return this.requireId(organizationId),this.request({method:"GET",path:joinPaths(basePath17,organizationId,"domains"),queryParams})}async createOrganizationDomain(params){const{organizationId,...bodyParams}=params;return this.requireId(organizationId),this.request({method:"POST",path:joinPaths(basePath17,organizationId,"domains"),bodyParams:{...bodyParams,verified:bodyParams.verified??!0}})}async updateOrganizationDomain(params){const{organizationId,domainId,...bodyParams}=params;return this.requireId(organizationId),this.requireId(domainId),this.request({method:"PATCH",path:joinPaths(basePath17,organizationId,"domains",domainId),bodyParams})}async deleteOrganizationDomain(params){const{organizationId,domainId}=params;return this.requireId(organizationId),this.requireId(domainId),this.request({method:"DELETE",path:joinPaths(basePath17,organizationId,"domains",domainId)})}},basePath18="/oauth_applications",OAuthApplicationsApi=class extends AbstractAPI{async list(params={}){return this.request({method:"GET",path:basePath18,queryParams:params})}async get(oauthApplicationId){return this.requireId(oauthApplicationId),this.request({method:"GET",path:joinPaths(basePath18,oauthApplicationId)})}async create(params){return this.request({method:"POST",path:basePath18,bodyParams:params})}async update(params){const{oauthApplicationId,...bodyParams}=params;return this.requireId(oauthApplicationId),this.request({method:"PATCH",path:joinPaths(basePath18,oauthApplicationId),bodyParams})}async delete(oauthApplicationId){return this.requireId(oauthApplicationId),this.request({method:"DELETE",path:joinPaths(basePath18,oauthApplicationId)})}async rotateSecret(oauthApplicationId){return this.requireId(oauthApplicationId),this.request({method:"POST",path:joinPaths(basePath18,oauthApplicationId,"rotate_secret")})}},PhoneNumberAPI=class extends AbstractAPI{async getPhoneNumber(phoneNumberId){return this.requireId(phoneNumberId),this.request({method:"GET",path:joinPaths("/phone_numbers",phoneNumberId)})}async createPhoneNumber(params){return this.request({method:"POST",path:"/phone_numbers",bodyParams:params})}async updatePhoneNumber(phoneNumberId,params={}){return this.requireId(phoneNumberId),this.request({method:"PATCH",path:joinPaths("/phone_numbers",phoneNumberId),bodyParams:params})}async deletePhoneNumber(phoneNumberId){return this.requireId(phoneNumberId),this.request({method:"DELETE",path:joinPaths("/phone_numbers",phoneNumberId)})}},ProxyCheckAPI=class extends AbstractAPI{async verify(params){return this.request({method:"POST",path:"/proxy_checks",bodyParams:params})}},RedirectUrlAPI=class extends AbstractAPI{async getRedirectUrlList(){return this.request({method:"GET",path:"/redirect_urls",queryParams:{paginated:!0}})}async getRedirectUrl(redirectUrlId){return this.requireId(redirectUrlId),this.request({method:"GET",path:joinPaths("/redirect_urls",redirectUrlId)})}async createRedirectUrl(params){return this.request({method:"POST",path:"/redirect_urls",bodyParams:params})}async deleteRedirectUrl(redirectUrlId){return this.requireId(redirectUrlId),this.request({method:"DELETE",path:joinPaths("/redirect_urls",redirectUrlId)})}},basePath22="/saml_connections",SamlConnectionAPI=class extends AbstractAPI{async getSamlConnectionList(params={}){return this.request({method:"GET",path:basePath22,queryParams:params})}async createSamlConnection(params){return this.request({method:"POST",path:basePath22,bodyParams:params,options:{deepSnakecaseBodyParamKeys:!0}})}async getSamlConnection(samlConnectionId){return this.requireId(samlConnectionId),this.request({method:"GET",path:joinPaths(basePath22,samlConnectionId)})}async updateSamlConnection(samlConnectionId,params={}){return this.requireId(samlConnectionId),this.request({method:"PATCH",path:joinPaths(basePath22,samlConnectionId),bodyParams:params,options:{deepSnakecaseBodyParamKeys:!0}})}async deleteSamlConnection(samlConnectionId){return this.requireId(samlConnectionId),this.request({method:"DELETE",path:joinPaths(basePath22,samlConnectionId)})}},SessionAPI=class extends AbstractAPI{async getSessionList(params={}){return this.request({method:"GET",path:"/sessions",queryParams:{...params,paginated:!0}})}async getSession(sessionId){return this.requireId(sessionId),this.request({method:"GET",path:joinPaths("/sessions",sessionId)})}async createSession(params){return this.request({method:"POST",path:"/sessions",bodyParams:params})}async revokeSession(sessionId){return this.requireId(sessionId),this.request({method:"POST",path:joinPaths("/sessions",sessionId,"revoke")})}async verifySession(sessionId,token){return this.requireId(sessionId),this.request({method:"POST",path:joinPaths("/sessions",sessionId,"verify"),bodyParams:{token}})}async getToken(sessionId,template,expiresInSeconds){this.requireId(sessionId);const requestOptions={method:"POST",path:template?joinPaths("/sessions",sessionId,"tokens",template):joinPaths("/sessions",sessionId,"tokens")};return void 0!==expiresInSeconds&&(requestOptions.bodyParams={expires_in_seconds:expiresInSeconds}),this.request(requestOptions)}async refreshSession(sessionId,params){this.requireId(sessionId);const{suffixed_cookies,...restParams}=params;return this.request({method:"POST",path:joinPaths("/sessions",sessionId,"refresh"),bodyParams:restParams,queryParams:{suffixed_cookies}})}},SignInTokenAPI=class extends AbstractAPI{async createSignInToken(params){return this.request({method:"POST",path:"/sign_in_tokens",bodyParams:params})}async revokeSignInToken(signInTokenId){return this.requireId(signInTokenId),this.request({method:"POST",path:joinPaths("/sign_in_tokens",signInTokenId,"revoke")})}},SignUpAPI=class extends AbstractAPI{async get(signUpAttemptId){return this.requireId(signUpAttemptId),this.request({method:"GET",path:joinPaths("/sign_ups",signUpAttemptId)})}async update(params){const{signUpAttemptId,...bodyParams}=params;return this.request({method:"PATCH",path:joinPaths("/sign_ups",signUpAttemptId),bodyParams})}},TestingTokenAPI=class extends AbstractAPI{async createTestingToken(){return this.request({method:"POST",path:"/testing_tokens"})}},UserAPI=class extends AbstractAPI{async getUserList(params={}){const{limit,offset,orderBy,...userCountParams}=params,[data,totalCount]=await Promise.all([this.request({method:"GET",path:"/users",queryParams:params}),this.getCount(userCountParams)]);return{data,totalCount}}async getUser(userId){return this.requireId(userId),this.request({method:"GET",path:joinPaths("/users",userId)})}async createUser(params){return this.request({method:"POST",path:"/users",bodyParams:params})}async updateUser(userId,params={}){return this.requireId(userId),this.request({method:"PATCH",path:joinPaths("/users",userId),bodyParams:params})}async updateUserProfileImage(userId,params){this.requireId(userId);const formData=new runtime.FormData;return formData.append("file",params?.file),this.request({method:"POST",path:joinPaths("/users",userId,"profile_image"),formData})}async updateUserMetadata(userId,params){return this.requireId(userId),this.request({method:"PATCH",path:joinPaths("/users",userId,"metadata"),bodyParams:params})}async deleteUser(userId){return this.requireId(userId),this.request({method:"DELETE",path:joinPaths("/users",userId)})}async getCount(params={}){return this.request({method:"GET",path:joinPaths("/users","count"),queryParams:params})}async getUserOauthAccessToken(userId,provider){this.requireId(userId);const hasPrefix=provider.startsWith("oauth_"),_provider=hasPrefix?provider:`oauth_${provider}`;return hasPrefix&&(0,deprecated.x9)("getUserOauthAccessToken(userId, provider)","Remove the `oauth_` prefix from the `provider` argument."),this.request({method:"GET",path:joinPaths("/users",userId,"oauth_access_tokens",_provider),queryParams:{paginated:!0}})}async disableUserMFA(userId){return this.requireId(userId),this.request({method:"DELETE",path:joinPaths("/users",userId,"mfa")})}async getOrganizationMembershipList(params){const{userId,limit,offset}=params;return this.requireId(userId),this.request({method:"GET",path:joinPaths("/users",userId,"organization_memberships"),queryParams:{limit,offset}})}async getOrganizationInvitationList(params){const{userId,...queryParams}=params;return this.requireId(userId),this.request({method:"GET",path:joinPaths("/users",userId,"organization_invitations"),queryParams})}async verifyPassword(params){const{userId,password}=params;return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"verify_password"),bodyParams:{password}})}async verifyTOTP(params){const{userId,code}=params;return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"verify_totp"),bodyParams:{code}})}async banUser(userId){return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"ban")})}async unbanUser(userId){return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"unban")})}async lockUser(userId){return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"lock")})}async unlockUser(userId){return this.requireId(userId),this.request({method:"POST",path:joinPaths("/users",userId,"unlock")})}async deleteUserProfileImage(userId){return this.requireId(userId),this.request({method:"DELETE",path:joinPaths("/users",userId,"profile_image")})}async deleteUserPasskey(params){return this.requireId(params.userId),this.requireId(params.passkeyIdentificationId),this.request({method:"DELETE",path:joinPaths("/users",params.userId,"passkeys",params.passkeyIdentificationId)})}async deleteUserWeb3Wallet(params){return this.requireId(params.userId),this.requireId(params.web3WalletIdentificationId),this.request({method:"DELETE",path:joinPaths("/users",params.userId,"web3_wallets",params.web3WalletIdentificationId)})}async deleteUserExternalAccount(params){return this.requireId(params.userId),this.requireId(params.externalAccountId),this.request({method:"DELETE",path:joinPaths("/users",params.userId,"external_accounts",params.externalAccountId)})}async deleteUserBackupCodes(userId){return this.requireId(userId),this.request({method:"DELETE",path:joinPaths("/users",userId,"backup_code")})}async deleteUserTOTP(userId){return this.requireId(userId),this.request({method:"DELETE",path:joinPaths("/users",userId,"totp")})}},WaitlistEntryAPI=class extends AbstractAPI{async list(params={}){return this.request({method:"GET",path:"/waitlist_entries",queryParams:params})}async create(params){return this.request({method:"POST",path:"/waitlist_entries",bodyParams:params})}},WebhookAPI=class extends AbstractAPI{async createSvixApp(){return this.request({method:"POST",path:joinPaths("/webhooks","svix")})}async generateSvixAuthURL(){return this.request({method:"POST",path:joinPaths("/webhooks","svix_url")})}async deleteSvixApp(){return this.request({method:"DELETE",path:joinPaths("/webhooks","svix")})}},BillingAPI=class extends AbstractAPI{async getPlanList(params){return this.request({method:"GET",path:joinPaths("/commerce","plans"),queryParams:params})}},isObject=value=>"object"==typeof value&&null!==value,isObjectCustom=value=>isObject(value)&&!(value instanceof RegExp)&&!(value instanceof Error)&&!(value instanceof Date)&&!(globalThis.Blob&&value instanceof globalThis.Blob),mapObjectSkip=Symbol("mapObjectSkip"),_mapObject=(object,mapper,options,isSeen=new WeakMap)=>{if(options={deep:!1,target:{},...options},isSeen.has(object))return isSeen.get(object);isSeen.set(object,options.target);const{target}=options;delete options.target;const mapArray=array=>array.map(element=>isObjectCustom(element)?_mapObject(element,mapper,options,isSeen):element);if(Array.isArray(object))return mapArray(object);for(const[key,value]of Object.entries(object)){const mapResult=mapper(key,value,object);if(mapResult===mapObjectSkip)continue;let[newKey,newValue,{shouldRecurse=!0}={}]=mapResult;"__proto__"!==newKey&&(options.deep&&shouldRecurse&&isObjectCustom(newValue)&&(newValue=Array.isArray(newValue)?mapArray(newValue):_mapObject(newValue,mapper,options,isSeen)),target[newKey]=newValue)}return target};function mapObject(object,mapper,options){if(!isObject(object))throw new TypeError(`Expected an object, got \`${object}\` (${typeof object})`);if(Array.isArray(object))throw new TypeError("Expected an object, got an array");return _mapObject(object,mapper,options)}var SPLIT_LOWER_UPPER_RE=/([\p{Ll}\d])(\p{Lu})/gu,SPLIT_UPPER_UPPER_RE=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,SPLIT_SEPARATE_NUMBER_RE=/(\d)\p{Ll}|(\p{L})\d/u,DEFAULT_STRIP_REGEXP=/[^\p{L}\d]+/giu;function split(value){let result=value.trim();result=result.replace(SPLIT_LOWER_UPPER_RE,"$1\0$2").replace(SPLIT_UPPER_UPPER_RE,"$1\0$2"),result=result.replace(DEFAULT_STRIP_REGEXP,"\0");let start=0,end=result.length;for(;"\0"===result.charAt(start);)start++;if(start===end)return[];for(;"\0"===result.charAt(end-1);)end--;return result.slice(start,end).split(/\0/g)}function splitSeparateNumbers(value){const words=split(value);for(let i=0;i<words.length;i++){const word=words[i],match2=SPLIT_SEPARATE_NUMBER_RE.exec(word);if(match2){const offset=match2.index+(match2[1]??match2[2]).length;words.splice(i,1,word.slice(0,offset),word.slice(offset))}}return words}function noCase(input,options){const[prefix,words,suffix]=function splitPrefixSuffix(input,options={}){const splitFn=options.split??(options.separateNumbers?splitSeparateNumbers:split),prefixCharacters=options.prefixCharacters??"",suffixCharacters=options.suffixCharacters??"";let prefixIndex=0,suffixIndex=input.length;for(;prefixIndex<input.length;){const char=input.charAt(prefixIndex);if(!prefixCharacters.includes(char))break;prefixIndex++}for(;suffixIndex>prefixIndex;){const index=suffixIndex-1,char=input.charAt(index);if(!suffixCharacters.includes(char))break;suffixIndex=index}return[input.slice(0,prefixIndex),splitFn(input.slice(prefixIndex,suffixIndex)),input.slice(suffixIndex)]}(input,options);return prefix+words.map(function lowerFactory(locale){return!1===locale?input=>input.toLowerCase():input=>input.toLocaleLowerCase(locale)}(options?.locale)).join(options?.delimiter??" ")+suffix}function snakeCase(input,options){return noCase(input,{delimiter:"_",...options})}var PlainObjectConstructor={}.constructor;function matches(patterns,value){return patterns.some(pattern=>"string"==typeof pattern?pattern===value:pattern.test(value))}function mapperOptions(key,val,options){return options.shouldRecurse?{shouldRecurse:options.shouldRecurse(key,val)}:void 0}var snakecase_keys_default=function snakecaseKeys(obj,options){if(Array.isArray(obj)){if(obj.some(item=>item.constructor!==PlainObjectConstructor))throw new Error("obj must be array of plain objects");const convertCase2=(options={deep:!0,exclude:[],parsingOptions:{},...options}).snakeCase||(key=>snakeCase(key,options.parsingOptions));return obj.map(item=>mapObject(item,(key,val)=>[matches(options.exclude,key)?key:convertCase2(key),val,mapperOptions(key,val,options)],options))}if(obj.constructor!==PlainObjectConstructor)throw new Error("obj must be an plain object");const convertCase=(options={deep:!0,exclude:[],parsingOptions:{},...options}).snakeCase||(key=>snakeCase(key,options.parsingOptions));return mapObject(obj,(key,val)=>[matches(options.exclude,key)?key:convertCase(key),val,mapperOptions(key,val,options)],options)},AccountlessApplication=class _AccountlessApplication{constructor(publishableKey,secretKey,claimUrl,apiKeysUrl){this.publishableKey=publishableKey,this.secretKey=secretKey,this.claimUrl=claimUrl,this.apiKeysUrl=apiKeysUrl}static fromJSON(data){return new _AccountlessApplication(data.publishable_key,data.secret_key,data.claim_url,data.api_keys_url)}},ActorToken=class _ActorToken{constructor(id,status,userId,actor,token,url,createdAt,updatedAt){this.id=id,this.status=status,this.userId=userId,this.actor=actor,this.token=token,this.url=url,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _ActorToken(data.id,data.status,data.user_id,data.actor,data.token,data.url,data.created_at,data.updated_at)}},AllowlistIdentifier=class _AllowlistIdentifier{constructor(id,identifier,identifierType,createdAt,updatedAt,instanceId,invitationId){this.id=id,this.identifier=identifier,this.identifierType=identifierType,this.createdAt=createdAt,this.updatedAt=updatedAt,this.instanceId=instanceId,this.invitationId=invitationId}static fromJSON(data){return new _AllowlistIdentifier(data.id,data.identifier,data.identifier_type,data.created_at,data.updated_at,data.instance_id,data.invitation_id)}},APIKey=class _APIKey{constructor(id,type,name,subject,scopes,claims,revoked,revocationReason,expired,expiration,createdBy,description,lastUsedAt,createdAt,updatedAt,secret){this.id=id,this.type=type,this.name=name,this.subject=subject,this.scopes=scopes,this.claims=claims,this.revoked=revoked,this.revocationReason=revocationReason,this.expired=expired,this.expiration=expiration,this.createdBy=createdBy,this.description=description,this.lastUsedAt=lastUsedAt,this.createdAt=createdAt,this.updatedAt=updatedAt,this.secret=secret}static fromJSON(data){return new _APIKey(data.id,data.type,data.name,data.subject,data.scopes,data.claims,data.revoked,data.revocation_reason,data.expired,data.expiration,data.created_by,data.description,data.last_used_at,data.created_at,data.updated_at,data.secret)}},BlocklistIdentifier=class _BlocklistIdentifier{constructor(id,identifier,identifierType,createdAt,updatedAt,instanceId){this.id=id,this.identifier=identifier,this.identifierType=identifierType,this.createdAt=createdAt,this.updatedAt=updatedAt,this.instanceId=instanceId}static fromJSON(data){return new _BlocklistIdentifier(data.id,data.identifier,data.identifier_type,data.created_at,data.updated_at,data.instance_id)}},SessionActivity=class _SessionActivity{constructor(id,isMobile,ipAddress,city,country,browserVersion,browserName,deviceType){this.id=id,this.isMobile=isMobile,this.ipAddress=ipAddress,this.city=city,this.country=country,this.browserVersion=browserVersion,this.browserName=browserName,this.deviceType=deviceType}static fromJSON(data){return new _SessionActivity(data.id,data.is_mobile,data.ip_address,data.city,data.country,data.browser_version,data.browser_name,data.device_type)}},Session=class _Session{constructor(id,clientId,userId,status,lastActiveAt,expireAt,abandonAt,createdAt,updatedAt,lastActiveOrganizationId,latestActivity,actor=null){this.id=id,this.clientId=clientId,this.userId=userId,this.status=status,this.lastActiveAt=lastActiveAt,this.expireAt=expireAt,this.abandonAt=abandonAt,this.createdAt=createdAt,this.updatedAt=updatedAt,this.lastActiveOrganizationId=lastActiveOrganizationId,this.latestActivity=latestActivity,this.actor=actor}static fromJSON(data){return new _Session(data.id,data.client_id,data.user_id,data.status,data.last_active_at,data.expire_at,data.abandon_at,data.created_at,data.updated_at,data.last_active_organization_id,data.latest_activity&&SessionActivity.fromJSON(data.latest_activity),data.actor)}},Client=class _Client{constructor(id,sessionIds,sessions,signInId,signUpId,lastActiveSessionId,createdAt,updatedAt){this.id=id,this.sessionIds=sessionIds,this.sessions=sessions,this.signInId=signInId,this.signUpId=signUpId,this.lastActiveSessionId=lastActiveSessionId,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _Client(data.id,data.session_ids,data.sessions.map(x=>Session.fromJSON(x)),data.sign_in_id,data.sign_up_id,data.last_active_session_id,data.created_at,data.updated_at)}},CnameTarget=class _CnameTarget{constructor(host,value,required){this.host=host,this.value=value,this.required=required}static fromJSON(data){return new _CnameTarget(data.host,data.value,data.required)}},Cookies2=class _Cookies{constructor(cookies){this.cookies=cookies}static fromJSON(data){return new _Cookies(data.cookies)}},DeletedObject=class _DeletedObject{constructor(object,id,slug,deleted){this.object=object,this.id=id,this.slug=slug,this.deleted=deleted}static fromJSON(data){return new _DeletedObject(data.object,data.id||null,data.slug||null,data.deleted)}},Domain=class _Domain{constructor(id,name,isSatellite,frontendApiUrl,developmentOrigin,cnameTargets,accountsPortalUrl,proxyUrl){this.id=id,this.name=name,this.isSatellite=isSatellite,this.frontendApiUrl=frontendApiUrl,this.developmentOrigin=developmentOrigin,this.cnameTargets=cnameTargets,this.accountsPortalUrl=accountsPortalUrl,this.proxyUrl=proxyUrl}static fromJSON(data){return new _Domain(data.id,data.name,data.is_satellite,data.frontend_api_url,data.development_origin,data.cname_targets&&data.cname_targets.map(x=>CnameTarget.fromJSON(x)),data.accounts_portal_url,data.proxy_url)}},Email=class _Email{constructor(id,fromEmailName,emailAddressId,toEmailAddress,subject,body,bodyPlain,status,slug,data,deliveredByClerk){this.id=id,this.fromEmailName=fromEmailName,this.emailAddressId=emailAddressId,this.toEmailAddress=toEmailAddress,this.subject=subject,this.body=body,this.bodyPlain=bodyPlain,this.status=status,this.slug=slug,this.data=data,this.deliveredByClerk=deliveredByClerk}static fromJSON(data){return new _Email(data.id,data.from_email_name,data.email_address_id,data.to_email_address,data.subject,data.body,data.body_plain,data.status,data.slug,data.data,data.delivered_by_clerk)}},IdentificationLink=class _IdentificationLink{constructor(id,type){this.id=id,this.type=type}static fromJSON(data){return new _IdentificationLink(data.id,data.type)}},Verification=class _Verification{constructor(status,strategy,externalVerificationRedirectURL=null,attempts=null,expireAt=null,nonce=null,message=null){this.status=status,this.strategy=strategy,this.externalVerificationRedirectURL=externalVerificationRedirectURL,this.attempts=attempts,this.expireAt=expireAt,this.nonce=nonce,this.message=message}static fromJSON(data){return new _Verification(data.status,data.strategy,data.external_verification_redirect_url?new URL(data.external_verification_redirect_url):null,data.attempts,data.expire_at,data.nonce)}},EmailAddress=class _EmailAddress{constructor(id,emailAddress,verification,linkedTo){this.id=id,this.emailAddress=emailAddress,this.verification=verification,this.linkedTo=linkedTo}static fromJSON(data){return new _EmailAddress(data.id,data.email_address,data.verification&&Verification.fromJSON(data.verification),data.linked_to.map(link=>IdentificationLink.fromJSON(link)))}},ExternalAccount=class _ExternalAccount{constructor(id,provider,identificationId,externalId,approvedScopes,emailAddress,firstName,lastName,imageUrl,username,phoneNumber,publicMetadata={},label,verification){this.id=id,this.provider=provider,this.identificationId=identificationId,this.externalId=externalId,this.approvedScopes=approvedScopes,this.emailAddress=emailAddress,this.firstName=firstName,this.lastName=lastName,this.imageUrl=imageUrl,this.username=username,this.phoneNumber=phoneNumber,this.publicMetadata=publicMetadata,this.label=label,this.verification=verification}static fromJSON(data){return new _ExternalAccount(data.id,data.provider,data.identification_id,data.provider_user_id,data.approved_scopes,data.email_address,data.first_name,data.last_name,data.image_url||"",data.username,data.phone_number,data.public_metadata,data.label,data.verification&&Verification.fromJSON(data.verification))}},IdPOAuthAccessToken=class _IdPOAuthAccessToken{constructor(id,clientId,type,subject,scopes,revoked,revocationReason,expired,expiration,createdAt,updatedAt){this.id=id,this.clientId=clientId,this.type=type,this.subject=subject,this.scopes=scopes,this.revoked=revoked,this.revocationReason=revocationReason,this.expired=expired,this.expiration=expiration,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _IdPOAuthAccessToken(data.id,data.client_id,data.type,data.subject,data.scopes,data.revoked,data.revocation_reason,data.expired,data.expiration,data.created_at,data.updated_at)}},Instance=class _Instance{constructor(id,environmentType,allowedOrigins){this.id=id,this.environmentType=environmentType,this.allowedOrigins=allowedOrigins}static fromJSON(data){return new _Instance(data.id,data.environment_type,data.allowed_origins)}},InstanceRestrictions=class _InstanceRestrictions{constructor(allowlist,blocklist,blockEmailSubaddresses,blockDisposableEmailDomains,ignoreDotsForGmailAddresses){this.allowlist=allowlist,this.blocklist=blocklist,this.blockEmailSubaddresses=blockEmailSubaddresses,this.blockDisposableEmailDomains=blockDisposableEmailDomains,this.ignoreDotsForGmailAddresses=ignoreDotsForGmailAddresses}static fromJSON(data){return new _InstanceRestrictions(data.allowlist,data.blocklist,data.block_email_subaddresses,data.block_disposable_email_domains,data.ignore_dots_for_gmail_addresses)}},InstanceSettings=class _InstanceSettings{constructor(id,restrictedToAllowlist,fromEmailAddress,progressiveSignUp,enhancedEmailDeliverability){this.id=id,this.restrictedToAllowlist=restrictedToAllowlist,this.fromEmailAddress=fromEmailAddress,this.progressiveSignUp=progressiveSignUp,this.enhancedEmailDeliverability=enhancedEmailDeliverability}static fromJSON(data){return new _InstanceSettings(data.id,data.restricted_to_allowlist,data.from_email_address,data.progressive_sign_up,data.enhanced_email_deliverability)}},Invitation=class _Invitation{constructor(id,emailAddress,publicMetadata,createdAt,updatedAt,status,url,revoked){this.id=id,this.emailAddress=emailAddress,this.publicMetadata=publicMetadata,this.createdAt=createdAt,this.updatedAt=updatedAt,this.status=status,this.url=url,this.revoked=revoked,this._raw=null}get raw(){return this._raw}static fromJSON(data){const res=new _Invitation(data.id,data.email_address,data.public_metadata,data.created_at,data.updated_at,data.status,data.url,data.revoked);return res._raw=data,res}},ObjectType_AccountlessApplication="accountless_application",ObjectType_ActorToken="actor_token",ObjectType_AllowlistIdentifier="allowlist_identifier",ObjectType_ApiKey="api_key",ObjectType_BlocklistIdentifier="blocklist_identifier",ObjectType_Client="client",ObjectType_Cookies="cookies",ObjectType_Domain="domain",ObjectType_Email="email",ObjectType_EmailAddress="email_address",ObjectType_Instance="instance",ObjectType_InstanceRestrictions="instance_restrictions",ObjectType_InstanceSettings="instance_settings",ObjectType_Invitation="invitation",ObjectType_Machine="machine",ObjectType_MachineScope="machine_scope",ObjectType_MachineSecretKey="machine_secret_key",ObjectType_M2MToken="machine_to_machine_token",ObjectType_JwtTemplate="jwt_template",ObjectType_OauthAccessToken="oauth_access_token",ObjectType_IdpOAuthAccessToken="clerk_idp_oauth_access_token",ObjectType_OAuthApplication="oauth_application",ObjectType_Organization="organization",ObjectType_OrganizationInvitation="organization_invitation",ObjectType_OrganizationMembership="organization_membership",ObjectType_OrganizationSettings="organization_settings",ObjectType_PhoneNumber="phone_number",ObjectType_ProxyCheck="proxy_check",ObjectType_RedirectUrl="redirect_url",ObjectType_SamlConnection="saml_connection",ObjectType_Session="session",ObjectType_SignInToken="sign_in_token",ObjectType_SignUpAttempt="sign_up_attempt",ObjectType_SmsMessage="sms_message",ObjectType_User="user",ObjectType_WaitlistEntry="waitlist_entry",ObjectType_Token="token",ObjectType_TotalCount="total_count",ObjectType_CommercePlan="commerce_plan",ObjectType_Feature="feature",Machine=class _Machine{constructor(id,name,instanceId,createdAt,updatedAt,scopedMachines,defaultTokenTtl,secretKey){this.id=id,this.name=name,this.instanceId=instanceId,this.createdAt=createdAt,this.updatedAt=updatedAt,this.scopedMachines=scopedMachines,this.defaultTokenTtl=defaultTokenTtl,this.secretKey=secretKey}static fromJSON(data){return new _Machine(data.id,data.name,data.instance_id,data.created_at,data.updated_at,data.scoped_machines.map(m=>new _Machine(m.id,m.name,m.instance_id,m.created_at,m.updated_at,[],m.default_token_ttl)),data.default_token_ttl,data.secret_key)}},MachineScope=class _MachineScope{constructor(fromMachineId,toMachineId,createdAt,deleted){this.fromMachineId=fromMachineId,this.toMachineId=toMachineId,this.createdAt=createdAt,this.deleted=deleted}static fromJSON(data){return new _MachineScope(data.from_machine_id,data.to_machine_id,data.created_at,data.deleted)}},MachineSecretKey=class _MachineSecretKey{constructor(secret){this.secret=secret}static fromJSON(data){return new _MachineSecretKey(data.secret)}},M2MToken=class _M2MToken{constructor(id,subject,scopes,claims,revoked,revocationReason,expired,expiration,createdAt,updatedAt,secret){this.id=id,this.subject=subject,this.scopes=scopes,this.claims=claims,this.revoked=revoked,this.revocationReason=revocationReason,this.expired=expired,this.expiration=expiration,this.createdAt=createdAt,this.updatedAt=updatedAt,this.secret=secret}static fromJSON(data){return new _M2MToken(data.id,data.subject,data.scopes,data.claims,data.revoked,data.revocation_reason,data.expired,data.expiration,data.created_at,data.updated_at,data.secret)}},JwtTemplate=class _JwtTemplate{constructor(id,name,claims,lifetime,allowedClockSkew,customSigningKey,signingAlgorithm,createdAt,updatedAt){this.id=id,this.name=name,this.claims=claims,this.lifetime=lifetime,this.allowedClockSkew=allowedClockSkew,this.customSigningKey=customSigningKey,this.signingAlgorithm=signingAlgorithm,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _JwtTemplate(data.id,data.name,data.claims,data.lifetime,data.allowed_clock_skew,data.custom_signing_key,data.signing_algorithm,data.created_at,data.updated_at)}},OauthAccessToken=class _OauthAccessToken{constructor(externalAccountId,provider,token,publicMetadata={},label,scopes,tokenSecret,expiresAt){this.externalAccountId=externalAccountId,this.provider=provider,this.token=token,this.publicMetadata=publicMetadata,this.label=label,this.scopes=scopes,this.tokenSecret=tokenSecret,this.expiresAt=expiresAt}static fromJSON(data){return new _OauthAccessToken(data.external_account_id,data.provider,data.token,data.public_metadata,data.label||"",data.scopes,data.token_secret,data.expires_at)}},OAuthApplication=class _OAuthApplication{constructor(id,instanceId,name,clientId,isPublic,scopes,redirectUris,authorizeUrl,tokenFetchUrl,userInfoUrl,discoveryUrl,tokenIntrospectionUrl,createdAt,updatedAt,clientSecret){this.id=id,this.instanceId=instanceId,this.name=name,this.clientId=clientId,this.isPublic=isPublic,this.scopes=scopes,this.redirectUris=redirectUris,this.authorizeUrl=authorizeUrl,this.tokenFetchUrl=tokenFetchUrl,this.userInfoUrl=userInfoUrl,this.discoveryUrl=discoveryUrl,this.tokenIntrospectionUrl=tokenIntrospectionUrl,this.createdAt=createdAt,this.updatedAt=updatedAt,this.clientSecret=clientSecret}static fromJSON(data){return new _OAuthApplication(data.id,data.instance_id,data.name,data.client_id,data.public,data.scopes,data.redirect_uris,data.authorize_url,data.token_fetch_url,data.user_info_url,data.discovery_url,data.token_introspection_url,data.created_at,data.updated_at,data.client_secret)}},Organization=class _Organization{constructor(id,name,slug,imageUrl,hasImage,createdAt,updatedAt,publicMetadata={},privateMetadata={},maxAllowedMemberships,adminDeleteEnabled,membersCount,createdBy){this.id=id,this.name=name,this.slug=slug,this.imageUrl=imageUrl,this.hasImage=hasImage,this.createdAt=createdAt,this.updatedAt=updatedAt,this.publicMetadata=publicMetadata,this.privateMetadata=privateMetadata,this.maxAllowedMemberships=maxAllowedMemberships,this.adminDeleteEnabled=adminDeleteEnabled,this.membersCount=membersCount,this.createdBy=createdBy,this._raw=null}get raw(){return this._raw}static fromJSON(data){const res=new _Organization(data.id,data.name,data.slug,data.image_url||"",data.has_image,data.created_at,data.updated_at,data.public_metadata,data.private_metadata,data.max_allowed_memberships,data.admin_delete_enabled,data.members_count,data.created_by);return res._raw=data,res}},OrganizationInvitation=class _OrganizationInvitation{constructor(id,emailAddress,role,roleName,organizationId,createdAt,updatedAt,expiresAt,url,status,publicMetadata={},privateMetadata={},publicOrganizationData){this.id=id,this.emailAddress=emailAddress,this.role=role,this.roleName=roleName,this.organizationId=organizationId,this.createdAt=createdAt,this.updatedAt=updatedAt,this.expiresAt=expiresAt,this.url=url,this.status=status,this.publicMetadata=publicMetadata,this.privateMetadata=privateMetadata,this.publicOrganizationData=publicOrganizationData,this._raw=null}get raw(){return this._raw}static fromJSON(data){const res=new _OrganizationInvitation(data.id,data.email_address,data.role,data.role_name,data.organization_id,data.created_at,data.updated_at,data.expires_at,data.url,data.status,data.public_metadata,data.private_metadata,data.public_organization_data);return res._raw=data,res}},OrganizationMembership=class _OrganizationMembership{constructor(id,role,permissions,publicMetadata={},privateMetadata={},createdAt,updatedAt,organization,publicUserData){this.id=id,this.role=role,this.permissions=permissions,this.publicMetadata=publicMetadata,this.privateMetadata=privateMetadata,this.createdAt=createdAt,this.updatedAt=updatedAt,this.organization=organization,this.publicUserData=publicUserData,this._raw=null}get raw(){return this._raw}static fromJSON(data){const res=new _OrganizationMembership(data.id,data.role,data.permissions,data.public_metadata,data.private_metadata,data.created_at,data.updated_at,Organization.fromJSON(data.organization),OrganizationMembershipPublicUserData.fromJSON(data.public_user_data));return res._raw=data,res}},OrganizationMembershipPublicUserData=class _OrganizationMembershipPublicUserData{constructor(identifier,firstName,lastName,imageUrl,hasImage,userId){this.identifier=identifier,this.firstName=firstName,this.lastName=lastName,this.imageUrl=imageUrl,this.hasImage=hasImage,this.userId=userId}static fromJSON(data){return new _OrganizationMembershipPublicUserData(data.identifier,data.first_name,data.last_name,data.image_url,data.has_image,data.user_id)}},OrganizationSettings=class _OrganizationSettings{constructor(enabled,maxAllowedMemberships,maxAllowedRoles,maxAllowedPermissions,creatorRole,adminDeleteEnabled,domainsEnabled,domainsEnrollmentModes,domainsDefaultRole){this.enabled=enabled,this.maxAllowedMemberships=maxAllowedMemberships,this.maxAllowedRoles=maxAllowedRoles,this.maxAllowedPermissions=maxAllowedPermissions,this.creatorRole=creatorRole,this.adminDeleteEnabled=adminDeleteEnabled,this.domainsEnabled=domainsEnabled,this.domainsEnrollmentModes=domainsEnrollmentModes,this.domainsDefaultRole=domainsDefaultRole}static fromJSON(data){return new _OrganizationSettings(data.enabled,data.max_allowed_memberships,data.max_allowed_roles,data.max_allowed_permissions,data.creator_role,data.admin_delete_enabled,data.domains_enabled,data.domains_enrollment_modes,data.domains_default_role)}},PhoneNumber=class _PhoneNumber{constructor(id,phoneNumber,reservedForSecondFactor,defaultSecondFactor,verification,linkedTo){this.id=id,this.phoneNumber=phoneNumber,this.reservedForSecondFactor=reservedForSecondFactor,this.defaultSecondFactor=defaultSecondFactor,this.verification=verification,this.linkedTo=linkedTo}static fromJSON(data){return new _PhoneNumber(data.id,data.phone_number,data.reserved_for_second_factor,data.default_second_factor,data.verification&&Verification.fromJSON(data.verification),data.linked_to.map(link=>IdentificationLink.fromJSON(link)))}},ProxyCheck=class _ProxyCheck{constructor(id,domainId,lastRunAt,proxyUrl,successful,createdAt,updatedAt){this.id=id,this.domainId=domainId,this.lastRunAt=lastRunAt,this.proxyUrl=proxyUrl,this.successful=successful,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _ProxyCheck(data.id,data.domain_id,data.last_run_at,data.proxy_url,data.successful,data.created_at,data.updated_at)}},RedirectUrl=class _RedirectUrl{constructor(id,url,createdAt,updatedAt){this.id=id,this.url=url,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _RedirectUrl(data.id,data.url,data.created_at,data.updated_at)}},SamlConnection=class _SamlConnection{constructor(id,name,domain,organizationId,idpEntityId,idpSsoUrl,idpCertificate,idpMetadataUrl,idpMetadata,acsUrl,spEntityId,spMetadataUrl,active,provider,userCount,syncUserAttributes,allowSubdomains,allowIdpInitiated,createdAt,updatedAt,attributeMapping){this.id=id,this.name=name,this.domain=domain,this.organizationId=organizationId,this.idpEntityId=idpEntityId,this.idpSsoUrl=idpSsoUrl,this.idpCertificate=idpCertificate,this.idpMetadataUrl=idpMetadataUrl,this.idpMetadata=idpMetadata,this.acsUrl=acsUrl,this.spEntityId=spEntityId,this.spMetadataUrl=spMetadataUrl,this.active=active,this.provider=provider,this.userCount=userCount,this.syncUserAttributes=syncUserAttributes,this.allowSubdomains=allowSubdomains,this.allowIdpInitiated=allowIdpInitiated,this.createdAt=createdAt,this.updatedAt=updatedAt,this.attributeMapping=attributeMapping}static fromJSON(data){return new _SamlConnection(data.id,data.name,data.domain,data.organization_id,data.idp_entity_id,data.idp_sso_url,data.idp_certificate,data.idp_metadata_url,data.idp_metadata,data.acs_url,data.sp_entity_id,data.sp_metadata_url,data.active,data.provider,data.user_count,data.sync_user_attributes,data.allow_subdomains,data.allow_idp_initiated,data.created_at,data.updated_at,data.attribute_mapping&&AttributeMapping.fromJSON(data.attribute_mapping))}},SamlAccountConnection=class _SamlAccountConnection{constructor(id,name,domain,active,provider,syncUserAttributes,allowSubdomains,allowIdpInitiated,createdAt,updatedAt){this.id=id,this.name=name,this.domain=domain,this.active=active,this.provider=provider,this.syncUserAttributes=syncUserAttributes,this.allowSubdomains=allowSubdomains,this.allowIdpInitiated=allowIdpInitiated,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _SamlAccountConnection(data.id,data.name,data.domain,data.active,data.provider,data.sync_user_attributes,data.allow_subdomains,data.allow_idp_initiated,data.created_at,data.updated_at)}},AttributeMapping=class _AttributeMapping{constructor(userId,emailAddress,firstName,lastName){this.userId=userId,this.emailAddress=emailAddress,this.firstName=firstName,this.lastName=lastName}static fromJSON(data){return new _AttributeMapping(data.user_id,data.email_address,data.first_name,data.last_name)}},SamlAccount=class _SamlAccount{constructor(id,provider,providerUserId,active,emailAddress,firstName,lastName,verification,samlConnection){this.id=id,this.provider=provider,this.providerUserId=providerUserId,this.active=active,this.emailAddress=emailAddress,this.firstName=firstName,this.lastName=lastName,this.verification=verification,this.samlConnection=samlConnection}static fromJSON(data){return new _SamlAccount(data.id,data.provider,data.provider_user_id,data.active,data.email_address,data.first_name,data.last_name,data.verification&&Verification.fromJSON(data.verification),data.saml_connection&&SamlAccountConnection.fromJSON(data.saml_connection))}},SignInToken=class _SignInToken{constructor(id,userId,token,status,url,createdAt,updatedAt){this.id=id,this.userId=userId,this.token=token,this.status=status,this.url=url,this.createdAt=createdAt,this.updatedAt=updatedAt}static fromJSON(data){return new _SignInToken(data.id,data.user_id,data.token,data.status,data.url,data.created_at,data.updated_at)}},SignUpAttemptVerification=class _SignUpAttemptVerification{constructor(nextAction,supportedStrategies){this.nextAction=nextAction,this.supportedStrategies=supportedStrategies}static fromJSON(data){return new _SignUpAttemptVerification(data.next_action,data.supported_strategies)}},SignUpAttemptVerifications=class _SignUpAttemptVerifications{constructor(emailAddress,phoneNumber,web3Wallet,externalAccount){this.emailAddress=emailAddress,this.phoneNumber=phoneNumber,this.web3Wallet=web3Wallet,this.externalAccount=externalAccount}static fromJSON(data){return new _SignUpAttemptVerifications(data.email_address&&SignUpAttemptVerification.fromJSON(data.email_address),data.phone_number&&SignUpAttemptVerification.fromJSON(data.phone_number),data.web3_wallet&&SignUpAttemptVerification.fromJSON(data.web3_wallet),data.external_account)}},SignUpAttempt=class _SignUpAttempt{constructor(id,status,requiredFields,optionalFields,missingFields,unverifiedFields,verifications,username,emailAddress,phoneNumber,web3Wallet,passwordEnabled,firstName,lastName,customAction,externalId,createdSessionId,createdUserId,abandonAt,legalAcceptedAt,publicMetadata,unsafeMetadata){this.id=id,this.status=status,this.requiredFields=requiredFields,this.optionalFields=optionalFields,this.missingFields=missingFields,this.unverifiedFields=unverifiedFields,this.verifications=verifications,this.username=username,this.emailAddress=emailAddress,this.phoneNumber=phoneNumber,this.web3Wallet=web3Wallet,this.passwordEnabled=passwordEnabled,this.firstName=firstName,this.lastName=lastName,this.customAction=customAction,this.externalId=externalId,this.createdSessionId=createdSessionId,this.createdUserId=createdUserId,this.abandonAt=abandonAt,this.legalAcceptedAt=legalAcceptedAt,this.publicMetadata=publicMetadata,this.unsafeMetadata=unsafeMetadata}static fromJSON(data){return new _SignUpAttempt(data.id,data.status,data.required_fields,data.optional_fields,data.missing_fields,data.unverified_fields,data.verifications?SignUpAttemptVerifications.fromJSON(data.verifications):null,data.username,data.email_address,data.phone_number,data.web3_wallet,data.password_enabled,data.first_name,data.last_name,data.custom_action,data.external_id,data.created_session_id,data.created_user_id,data.abandon_at,data.legal_accepted_at,data.public_metadata,data.unsafe_metadata)}},SMSMessage=class _SMSMessage{constructor(id,fromPhoneNumber,toPhoneNumber,message,status,phoneNumberId,data){this.id=id,this.fromPhoneNumber=fromPhoneNumber,this.toPhoneNumber=toPhoneNumber,this.message=message,this.status=status,this.phoneNumberId=phoneNumberId,this.data=data}static fromJSON(data){return new _SMSMessage(data.id,data.from_phone_number,data.to_phone_number,data.message,data.status,data.phone_number_id,data.data)}},Token=class _Token{constructor(jwt){this.jwt=jwt}static fromJSON(data){return new _Token(data.jwt)}},Web3Wallet=class _Web3Wallet{constructor(id,web3Wallet,verification){this.id=id,this.web3Wallet=web3Wallet,this.verification=verification}static fromJSON(data){return new _Web3Wallet(data.id,data.web3_wallet,data.verification&&Verification.fromJSON(data.verification))}},User=class _User{constructor(id,passwordEnabled,totpEnabled,backupCodeEnabled,twoFactorEnabled,banned,locked,createdAt,updatedAt,imageUrl,hasImage,primaryEmailAddressId,primaryPhoneNumberId,primaryWeb3WalletId,lastSignInAt,externalId,username,firstName,lastName,publicMetadata={},privateMetadata={},unsafeMetadata={},emailAddresses=[],phoneNumbers=[],web3Wallets=[],externalAccounts=[],samlAccounts=[],lastActiveAt,createOrganizationEnabled,createOrganizationsLimit=null,deleteSelfEnabled,legalAcceptedAt){this.id=id,this.passwordEnabled=passwordEnabled,this.totpEnabled=totpEnabled,this.backupCodeEnabled=backupCodeEnabled,this.twoFactorEnabled=twoFactorEnabled,this.banned=banned,this.locked=locked,this.createdAt=createdAt,this.updatedAt=updatedAt,this.imageUrl=imageUrl,this.hasImage=hasImage,this.primaryEmailAddressId=primaryEmailAddressId,this.primaryPhoneNumberId=primaryPhoneNumberId,this.primaryWeb3WalletId=primaryWeb3WalletId,this.lastSignInAt=lastSignInAt,this.externalId=externalId,this.username=username,this.firstName=firstName,this.lastName=lastName,this.publicMetadata=publicMetadata,this.privateMetadata=privateMetadata,this.unsafeMetadata=unsafeMetadata,this.emailAddresses=emailAddresses,this.phoneNumbers=phoneNumbers,this.web3Wallets=web3Wallets,this.externalAccounts=externalAccounts,this.samlAccounts=samlAccounts,this.lastActiveAt=lastActiveAt,this.createOrganizationEnabled=createOrganizationEnabled,this.createOrganizationsLimit=createOrganizationsLimit,this.deleteSelfEnabled=deleteSelfEnabled,this.legalAcceptedAt=legalAcceptedAt,this._raw=null}get raw(){return this._raw}static fromJSON(data){const res=new _User(data.id,data.password_enabled,data.totp_enabled,data.backup_code_enabled,data.two_factor_enabled,data.banned,data.locked,data.created_at,data.updated_at,data.image_url,data.has_image,data.primary_email_address_id,data.primary_phone_number_id,data.primary_web3_wallet_id,data.last_sign_in_at,data.external_id,data.username,data.first_name,data.last_name,data.public_metadata,data.private_metadata,data.unsafe_metadata,(data.email_addresses||[]).map(x=>EmailAddress.fromJSON(x)),(data.phone_numbers||[]).map(x=>PhoneNumber.fromJSON(x)),(data.web3_wallets||[]).map(x=>Web3Wallet.fromJSON(x)),(data.external_accounts||[]).map(x=>ExternalAccount.fromJSON(x)),(data.saml_accounts||[]).map(x=>SamlAccount.fromJSON(x)),data.last_active_at,data.create_organization_enabled,data.create_organizations_limit,data.delete_self_enabled,data.legal_accepted_at);return res._raw=data,res}get primaryEmailAddress(){return this.emailAddresses.find(({id})=>id===this.primaryEmailAddressId)??null}get primaryPhoneNumber(){return this.phoneNumbers.find(({id})=>id===this.primaryPhoneNumberId)??null}get primaryWeb3Wallet(){return this.web3Wallets.find(({id})=>id===this.primaryWeb3WalletId)??null}get fullName(){return[this.firstName,this.lastName].join(" ").trim()||null}},WaitlistEntry=class _WaitlistEntry{constructor(id,emailAddress,status,invitation,createdAt,updatedAt,isLocked){this.id=id,this.emailAddress=emailAddress,this.status=status,this.invitation=invitation,this.createdAt=createdAt,this.updatedAt=updatedAt,this.isLocked=isLocked}static fromJSON(data){return new _WaitlistEntry(data.id,data.email_address,data.status,data.invitation&&Invitation.fromJSON(data.invitation),data.created_at,data.updated_at,data.is_locked)}},Feature=class _Feature{constructor(id,name,description,slug,avatarUrl){this.id=id,this.name=name,this.description=description,this.slug=slug,this.avatarUrl=avatarUrl}static fromJSON(data){return new _Feature(data.id,data.name,data.description,data.slug,data.avatar_url)}},CommercePlan=class _CommercePlan{constructor(id,productId,name,slug,description,isDefault,isRecurring,hasBaseFee,publiclyVisible,fee,annualFee,annualMonthlyFee,forPayerType,features){this.id=id,this.productId=productId,this.name=name,this.slug=slug,this.description=description,this.isDefault=isDefault,this.isRecurring=isRecurring,this.hasBaseFee=hasBaseFee,this.publiclyVisible=publiclyVisible,this.fee=fee,this.annualFee=annualFee,this.annualMonthlyFee=annualMonthlyFee,this.forPayerType=forPayerType,this.features=features}static fromJSON(data){const formatAmountJSON=fee=>({amount:fee.amount,amountFormatted:fee.amount_formatted,currency:fee.currency,currencySymbol:fee.currency_symbol});return new _CommercePlan(data.id,data.product_id,data.name,data.slug,data.description,data.is_default,data.is_recurring,data.has_base_fee,data.publicly_visible,formatAmountJSON(data.fee),formatAmountJSON(data.annual_fee),formatAmountJSON(data.annual_monthly_fee),data.for_payer_type,data.features.map(feature=>Feature.fromJSON(feature)))}};function deserialize(payload){let data,totalCount;if(Array.isArray(payload)){return{data:payload.map(item=>jsonToObject(item))}}return function isPaginated(payload){if(!payload||"object"!=typeof payload||!("data"in payload))return!1;return Array.isArray(payload.data)&&void 0!==payload.data}(payload)?(data=payload.data.map(item=>jsonToObject(item)),totalCount=payload.total_count,{data,totalCount}):{data:jsonToObject(payload)}}function jsonToObject(item){if("string"!=typeof item&&"object"in item&&"deleted"in item)return DeletedObject.fromJSON(item);switch(item.object){case ObjectType_AccountlessApplication:return AccountlessApplication.fromJSON(item);case ObjectType_ActorToken:return ActorToken.fromJSON(item);case ObjectType_AllowlistIdentifier:return AllowlistIdentifier.fromJSON(item);case ObjectType_ApiKey:return APIKey.fromJSON(item);case ObjectType_BlocklistIdentifier:return BlocklistIdentifier.fromJSON(item);case ObjectType_Client:return Client.fromJSON(item);case ObjectType_Cookies:return Cookies2.fromJSON(item);case ObjectType_Domain:return Domain.fromJSON(item);case ObjectType_EmailAddress:return EmailAddress.fromJSON(item);case ObjectType_Email:return Email.fromJSON(item);case ObjectType_IdpOAuthAccessToken:return IdPOAuthAccessToken.fromJSON(item);case ObjectType_Instance:return Instance.fromJSON(item);case ObjectType_InstanceRestrictions:return InstanceRestrictions.fromJSON(item);case ObjectType_InstanceSettings:return InstanceSettings.fromJSON(item);case ObjectType_Invitation:return Invitation.fromJSON(item);case ObjectType_JwtTemplate:return JwtTemplate.fromJSON(item);case ObjectType_Machine:return Machine.fromJSON(item);case ObjectType_MachineScope:return MachineScope.fromJSON(item);case ObjectType_MachineSecretKey:return MachineSecretKey.fromJSON(item);case ObjectType_M2MToken:return M2MToken.fromJSON(item);case ObjectType_OauthAccessToken:return OauthAccessToken.fromJSON(item);case ObjectType_OAuthApplication:return OAuthApplication.fromJSON(item);case ObjectType_Organization:return Organization.fromJSON(item);case ObjectType_OrganizationInvitation:return OrganizationInvitation.fromJSON(item);case ObjectType_OrganizationMembership:return OrganizationMembership.fromJSON(item);case ObjectType_OrganizationSettings:return OrganizationSettings.fromJSON(item);case ObjectType_PhoneNumber:return PhoneNumber.fromJSON(item);case ObjectType_ProxyCheck:return ProxyCheck.fromJSON(item);case ObjectType_RedirectUrl:return RedirectUrl.fromJSON(item);case ObjectType_SamlConnection:return SamlConnection.fromJSON(item);case ObjectType_SignInToken:return SignInToken.fromJSON(item);case ObjectType_SignUpAttempt:return SignUpAttempt.fromJSON(item);case ObjectType_Session:return Session.fromJSON(item);case ObjectType_SmsMessage:return SMSMessage.fromJSON(item);case ObjectType_Token:return Token.fromJSON(item);case ObjectType_TotalCount:return function getCount(item){return item.total_count}(item);case ObjectType_User:return User.fromJSON(item);case ObjectType_WaitlistEntry:return WaitlistEntry.fromJSON(item);case ObjectType_CommercePlan:return CommercePlan.fromJSON(item);case ObjectType_Feature:return Feature.fromJSON(item);default:return item}}function buildRequest(options){return function withLegacyRequestReturn(cb){return async(...args)=>{const{data,errors,totalCount,status,statusText,clerkTraceId,retryAfter}=await cb(...args);if(errors){const error=new dist_error.gO(statusText||"",{data:[],status,clerkTraceId,retryAfter});throw error.errors=errors,error}return void 0!==totalCount?{data,totalCount}:data}}(async requestOptions=>{const{secretKey,machineSecretKey,useMachineSecretKey=!1,requireSecretKey=!0,apiUrl=API_URL,apiVersion=API_VERSION,userAgent=USER_AGENT,skipApiVersionInUrl=!1}=options,{path,method,queryParams,headerParams,bodyParams,formData,options:opts}=requestOptions,{deepSnakecaseBodyParamKeys=!1}=opts||{};requireSecretKey&&assertValidSecretKey(secretKey);const url=skipApiVersionInUrl?joinPaths(apiUrl,path):joinPaths(apiUrl,apiVersion,path),finalUrl=new URL(url);if(queryParams){const snakecasedQueryParams=snakecase_keys_default({...queryParams});for(const[key,val]of Object.entries(snakecasedQueryParams))val&&[val].flat().forEach(v=>finalUrl.searchParams.append(key,v))}const headers=new Headers({"Clerk-API-Version":"2025-04-10",[constants.Headers.UserAgent]:userAgent,...headerParams}),authorizationHeader=constants.Headers.Authorization;let res;headers.has(authorizationHeader)||(useMachineSecretKey&&machineSecretKey?headers.set(authorizationHeader,`Bearer ${machineSecretKey}`):secretKey&&headers.set(authorizationHeader,`Bearer ${secretKey}`));try{if(formData)res=await runtime.fetch(finalUrl.href,{method,headers,body:formData});else{headers.set("Content-Type","application/json");const buildBody=()=>{if(!("GET"!==method&&bodyParams&&Object.keys(bodyParams).length>0))return null;const formatKeys=object=>snakecase_keys_default(object,{deep:deepSnakecaseBodyParamKeys});return{body:JSON.stringify(Array.isArray(bodyParams)?bodyParams.map(formatKeys):formatKeys(bodyParams))}};res=await runtime.fetch(finalUrl.href,{method,headers,...buildBody()})}const isJSONResponse=res?.headers&&res.headers?.get(constants.Headers.ContentType)===constants.ContentTypes.Json,responseBody=await(isJSONResponse?res.json():res.text());return res.ok?{...deserialize(responseBody),errors:null}:{data:null,errors:parseErrors(responseBody),status:res?.status,statusText:res?.statusText,clerkTraceId:getTraceId(responseBody,res?.headers),retryAfter:getRetryAfter(res?.headers)}}catch(err){return err instanceof Error?{data:null,errors:[{code:"unexpected_error",message:err.message||"Unexpected error"}],clerkTraceId:getTraceId(err,res?.headers)}:{data:null,errors:parseErrors(err),status:res?.status,statusText:res?.statusText,clerkTraceId:getTraceId(err,res?.headers),retryAfter:getRetryAfter(res?.headers)}}})}function getTraceId(data,headers){if(data&&"object"==typeof data&&"clerk_trace_id"in data&&"string"==typeof data.clerk_trace_id)return data.clerk_trace_id;const cfRay=headers?.get("cf-ray");return cfRay||""}function getRetryAfter(headers){const retryAfter=headers?.get("Retry-After");if(!retryAfter)return;const value=parseInt(retryAfter,10);return isNaN(value)?void 0:value}function parseErrors(data){if(data&&"object"==typeof data&&"errors"in data){const errors=data.errors;return errors.length>0?errors.map(dist_error.nU):[]}return[]}function createBackendApiClient(options){const request=buildRequest(options);return{__experimental_accountlessApplications:new AccountlessApplicationAPI(buildRequest({...options,requireSecretKey:!1})),actorTokens:new ActorTokenAPI(request),allowlistIdentifiers:new AllowlistIdentifierAPI(request),apiKeys:new APIKeysAPI(buildRequest({...options,skipApiVersionInUrl:!0})),betaFeatures:new BetaFeaturesAPI(request),blocklistIdentifiers:new BlocklistIdentifierAPI(request),billing:new BillingAPI(request),clients:new ClientAPI(request),domains:new DomainAPI(request),emailAddresses:new EmailAddressAPI(request),idPOAuthAccessToken:new IdPOAuthAccessTokenApi(buildRequest({...options,skipApiVersionInUrl:!0})),instance:new InstanceAPI(request),invitations:new InvitationAPI(request),jwks:new JwksAPI(request),jwtTemplates:new JwtTemplatesApi(request),machines:new MachineApi(request),m2mTokens:new M2MTokenApi(buildRequest({...options,skipApiVersionInUrl:!0,requireSecretKey:!1,useMachineSecretKey:!0})),oauthApplications:new OAuthApplicationsApi(request),organizations:new OrganizationAPI(request),phoneNumbers:new PhoneNumberAPI(request),proxyChecks:new ProxyCheckAPI(request),redirectUrls:new RedirectUrlAPI(request),samlConnections:new SamlConnectionAPI(request),sessions:new SessionAPI(request),signInTokens:new SignInTokenAPI(request),signUps:new SignUpAPI(request),testingTokens:new TestingTokenAPI(request),users:new UserAPI(request),waitlistEntries:new WaitlistEntryAPI(request),webhooks:new WebhookAPI(request)}}var MACHINE_TOKEN_PREFIXES=["mt_","oat_","ak_"];function isMachineTokenByPrefix(token){return MACHINE_TOKEN_PREFIXES.some(prefix=>token.startsWith(prefix))}function getMachineTokenType(token){if(token.startsWith("mt_"))return TokenType_M2MToken;if(token.startsWith("oat_"))return TokenType_OAuthToken;if(token.startsWith("ak_"))return TokenType_ApiKey;throw new Error("Unknown machine token type")}var isTokenTypeAccepted=(tokenType,acceptsToken)=>{if(!tokenType)return!1;if("any"===acceptsToken)return!0;return(Array.isArray(acceptsToken)?acceptsToken:[acceptsToken]).includes(tokenType)};var createDebug=data=>()=>{const res={...data};return res.secretKey=(res.secretKey||"").substring(0,7),res.jwtKey=(res.jwtKey||"").substring(0,7),{...res}};function signedInAuthObject(authenticateContext,sessionToken,sessionClaims){const{actor,sessionId,sessionStatus,userId,orgId,orgRole,orgSlug,orgPermissions,factorVerificationAge}=__experimental_JWTPayloadToAuthObjectProperties(sessionClaims),apiClient=createBackendApiClient(authenticateContext),getToken=createGetToken({sessionId,sessionToken,fetcher:async(sessionId2,template,expiresInSeconds)=>(await apiClient.sessions.getToken(sessionId2,template||"",expiresInSeconds)).jwt});return{tokenType:TokenType_SessionToken,actor,sessionClaims,sessionId,sessionStatus,userId,orgId,orgRole,orgSlug,orgPermissions,factorVerificationAge,getToken,has:(0,authorization.QL)({orgId,orgRole,orgPermissions,userId,factorVerificationAge,features:sessionClaims.fea||"",plans:sessionClaims.pla||""}),debug:createDebug({...authenticateContext,sessionToken}),isAuthenticated:!0}}function signedOutAuthObject(debugData,initialSessionStatus){return{tokenType:TokenType_SessionToken,sessionClaims:null,sessionId:null,sessionStatus:initialSessionStatus??null,userId:null,actor:null,orgId:null,orgRole:null,orgSlug:null,orgPermissions:null,factorVerificationAge:null,getToken:()=>Promise.resolve(null),has:()=>!1,debug:createDebug(debugData),isAuthenticated:!1}}function unauthenticatedMachineObject(tokenType,debugData){const baseObject={id:null,subject:null,scopes:null,has:()=>!1,getToken:()=>Promise.resolve(null),debug:createDebug(debugData),isAuthenticated:!1};switch(tokenType){case TokenType_ApiKey:return{...baseObject,tokenType,name:null,claims:null,scopes:null,userId:null,orgId:null};case TokenType_M2MToken:return{...baseObject,tokenType,claims:null,scopes:null,machineId:null};case TokenType_OAuthToken:return{...baseObject,tokenType,scopes:null,userId:null,clientId:null};default:throw new Error(`Invalid token type: ${tokenType}`)}}function invalidTokenAuthObject(){return{isAuthenticated:!1,tokenType:null,getToken:()=>Promise.resolve(null),has:()=>!1,debug:()=>({})}}var createGetToken=params=>{const{fetcher,sessionToken,sessionId}=params||{};return async(options={})=>sessionId?options.template||void 0!==options.expiresInSeconds?fetcher(sessionId,options.template,options.expiresInSeconds):sessionToken:null},AuthStatus_SignedIn="signed-in",AuthStatus_SignedOut="signed-out",AuthStatus_Handshake="handshake",AuthErrorReason_ClientUATWithoutSessionToken="client-uat-but-no-session-token",AuthErrorReason_DevBrowserMissing="dev-browser-missing",AuthErrorReason_DevBrowserSync="dev-browser-sync",AuthErrorReason_PrimaryRespondsToSyncing="primary-responds-to-syncing",AuthErrorReason_PrimaryDomainCrossOriginSync="primary-domain-cross-origin-sync",AuthErrorReason_SatelliteCookieNeedsSyncing="satellite-needs-syncing",AuthErrorReason_SessionTokenAndUATMissing="session-token-and-uat-missing",AuthErrorReason_SessionTokenMissing="session-token-missing",AuthErrorReason_SessionTokenExpired="session-token-expired",AuthErrorReason_SessionTokenIATBeforeClientUAT="session-token-iat-before-client-uat",AuthErrorReason_SessionTokenNBF="session-token-nbf",AuthErrorReason_SessionTokenIatInTheFuture="session-token-iat-in-the-future",AuthErrorReason_SessionTokenWithoutClientUAT="session-token-but-no-client-uat",AuthErrorReason_ActiveOrganizationMismatch="active-organization-mismatch",AuthErrorReason_TokenTypeMismatch="token-type-mismatch",AuthErrorReason_UnexpectedError="unexpected-error";function signedIn(params){const{authenticateContext,headers=new Headers,token}=params;return{status:AuthStatus_SignedIn,reason:null,message:null,proxyUrl:authenticateContext.proxyUrl||"",publishableKey:authenticateContext.publishableKey||"",isSatellite:authenticateContext.isSatellite||!1,domain:authenticateContext.domain||"",signInUrl:authenticateContext.signInUrl||"",signUpUrl:authenticateContext.signUpUrl||"",afterSignInUrl:authenticateContext.afterSignInUrl||"",afterSignUpUrl:authenticateContext.afterSignUpUrl||"",isSignedIn:!0,isAuthenticated:!0,tokenType:params.tokenType,toAuth:({treatPendingAsSignedOut=!0}={})=>{if(params.tokenType===TokenType_SessionToken){const{sessionClaims}=params,authObject=signedInAuthObject(authenticateContext,token,sessionClaims);return treatPendingAsSignedOut&&"pending"===authObject.sessionStatus?signedOutAuthObject(void 0,authObject.sessionStatus):authObject}const{machineData}=params;return function authenticatedMachineObject(tokenType,token,verificationResult,debugData){const baseObject={id:verificationResult.id,subject:verificationResult.subject,getToken:()=>Promise.resolve(token),has:()=>!1,debug:createDebug(debugData),isAuthenticated:!0};switch(tokenType){case TokenType_ApiKey:{const result=verificationResult;return{...baseObject,tokenType,name:result.name,claims:result.claims,scopes:result.scopes,userId:result.subject.startsWith("user_")?result.subject:null,orgId:result.subject.startsWith("org_")?result.subject:null}}case TokenType_M2MToken:{const result=verificationResult;return{...baseObject,tokenType,claims:result.claims,scopes:result.scopes,machineId:result.subject}}case TokenType_OAuthToken:{const result=verificationResult;return{...baseObject,tokenType,scopes:result.scopes,userId:result.subject,clientId:result.clientId}}default:throw new Error(`Invalid token type: ${tokenType}`)}}(params.tokenType,token,machineData,authenticateContext)},headers,token}}function signedOut(params){const{authenticateContext,headers=new Headers,reason,message="",tokenType}=params;return withDebugHeaders({status:AuthStatus_SignedOut,reason,message,proxyUrl:authenticateContext.proxyUrl||"",publishableKey:authenticateContext.publishableKey||"",isSatellite:authenticateContext.isSatellite||!1,domain:authenticateContext.domain||"",signInUrl:authenticateContext.signInUrl||"",signUpUrl:authenticateContext.signUpUrl||"",afterSignInUrl:authenticateContext.afterSignInUrl||"",afterSignUpUrl:authenticateContext.afterSignUpUrl||"",isSignedIn:!1,isAuthenticated:!1,tokenType,toAuth:()=>tokenType===TokenType_SessionToken?signedOutAuthObject({...authenticateContext,status:AuthStatus_SignedOut,reason,message}):unauthenticatedMachineObject(tokenType,{reason,message,headers}),headers,token:null})}var withDebugHeaders=requestState=>{const headers=new Headers(requestState.headers||{});if(requestState.message)try{headers.set(constants.Headers.AuthMessage,requestState.message)}catch{}if(requestState.reason)try{headers.set(constants.Headers.AuthReason,requestState.reason)}catch{}if(requestState.status)try{headers.set(constants.Headers.AuthStatus,requestState.status)}catch{}return requestState.headers=headers,requestState},ClerkUrl=class extends URL{isCrossOrigin(other){return this.origin!==new URL(other.toString()).origin}},createClerkUrl=(...args)=>new ClerkUrl(...args),ClerkRequest=class extends Request{constructor(input,init){super("string"!=typeof input&&"url"in input?input.url:String(input),init||"string"==typeof input?void 0:input),this.clerkUrl=this.deriveUrlFromHeaders(this),this.cookies=this.parseCookies(this)}toJSON(){return{url:this.clerkUrl.href,method:this.method,headers:JSON.stringify(Object.fromEntries(this.headers)),clerkUrl:this.clerkUrl.toString(),cookies:JSON.stringify(Object.fromEntries(this.cookies))}}deriveUrlFromHeaders(req){const initialUrl=new URL(req.url),forwardedProto=req.headers.get(constants.Headers.ForwardedProto),forwardedHost=req.headers.get(constants.Headers.ForwardedHost),host=req.headers.get(constants.Headers.Host),protocol=initialUrl.protocol,resolvedHost=this.getFirstValueFromHeader(forwardedHost)??host,resolvedProtocol=this.getFirstValueFromHeader(forwardedProto)??protocol?.replace(/[:/]/,""),origin=resolvedHost&&resolvedProtocol?`${resolvedProtocol}://${resolvedHost}`:initialUrl.origin;return origin===initialUrl.origin?createClerkUrl(initialUrl):createClerkUrl(initialUrl.pathname+initialUrl.search,origin)}getFirstValueFromHeader(value){return value?.split(",")[0]}parseCookies(req){const cookiesRecord=(0,dist.Qc)(this.decodeCookieValue(req.headers.get("cookie")||""));return new Map(Object.entries(cookiesRecord))}decodeCookieValue(str){return str?str.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent):str}},getCookieName=cookieDirective=>cookieDirective.split(";")[0]?.split("=")[0],getCookieValue=cookieDirective=>cookieDirective.split(";")[0]?.split("=")[1],cache={},lastUpdatedAt=0;function getFromCache(kid){return cache[kid]}function setInCache(jwk,shouldExpire=!0){cache[jwk.kid]=jwk,lastUpdatedAt=shouldExpire?Date.now():-1}function loadClerkJWKFromLocal(localKey){if(!getFromCache("local")){if(!localKey)throw new TokenVerificationError({action:TokenVerificationErrorAction_SetClerkJWTKey,message:"Missing local JWK.",reason:TokenVerificationErrorReason.LocalJWKMissing});setInCache({kid:"local",kty:"RSA",alg:"RS256",n:localKey.replace(/\r\n|\n|\r/g,"").replace("-----BEGIN PUBLIC KEY-----","").replace("-----END PUBLIC KEY-----","").replace("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA","").replace("IDAQAB","").replace(/\+/g,"-").replace(/\//g,"_"),e:"AQAB"},!1)}return getFromCache("local")}async function loadClerkJWKFromRemote({secretKey,apiUrl=API_URL,apiVersion=API_VERSION,kid,skipJwksCache}){if(skipJwksCache||function cacheHasExpired(){if(-1===lastUpdatedAt)return!1;const isExpired=Date.now()-lastUpdatedAt>=3e5;isExpired&&(cache={});return isExpired}()||!getFromCache(kid)){if(!secretKey)throw new TokenVerificationError({action:TokenVerificationErrorAction_ContactSupport,message:"Failed to load JWKS from Clerk Backend or Frontend API.",reason:TokenVerificationErrorReason.RemoteJWKFailedToLoad});const fetcher=()=>async function fetchJWKSFromBAPI(apiUrl,key,apiVersion){if(!key)throw new TokenVerificationError({action:TokenVerificationErrorAction_SetClerkSecretKey,message:"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.",reason:TokenVerificationErrorReason.RemoteJWKFailedToLoad});const url=new URL(apiUrl);url.pathname=joinPaths(url.pathname,apiVersion,"/jwks");const response=await runtime.fetch(url.href,{headers:{Authorization:`Bearer ${key}`,"Clerk-API-Version":"2025-04-10","Content-Type":"application/json","User-Agent":USER_AGENT}});if(!response.ok){const json=await response.json(),invalidSecretKeyError=getErrorObjectByCode(json?.errors,TokenVerificationErrorCode_InvalidSecretKey);if(invalidSecretKeyError){const reason=TokenVerificationErrorReason.InvalidSecretKey;throw new TokenVerificationError({action:TokenVerificationErrorAction_ContactSupport,message:invalidSecretKeyError.message,reason})}throw new TokenVerificationError({action:TokenVerificationErrorAction_ContactSupport,message:`Error loading Clerk JWKS from ${url.href} with code=${response.status}`,reason:TokenVerificationErrorReason.RemoteJWKFailedToLoad})}return response.json()}(apiUrl,secretKey,apiVersion),{keys}=await(0,chunk_N2V3PKFE.X)(fetcher);if(!keys||!keys.length)throw new TokenVerificationError({action:TokenVerificationErrorAction_ContactSupport,message:"The JWKS endpoint did not contain any signing keys. Contact support@clerk.com.",reason:TokenVerificationErrorReason.RemoteJWKFailedToLoad});keys.forEach(key=>setInCache(key))}const jwk=getFromCache(kid);if(!jwk){const jwkKeys=function getCacheValues(){return Object.values(cache)}().map(jwk2=>jwk2.kid).sort().join(", ");throw new TokenVerificationError({action:`Go to your Dashboard and validate your secret and public keys are correct. ${TokenVerificationErrorAction_ContactSupport} if the issue persists.`,message:`Unable to find a signing key in JWKS that matches the kid='${kid}' of the provided session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT. The following kid is available: ${jwkKeys}`,reason:TokenVerificationErrorReason.JWKKidMismatch})}return jwk}var getErrorObjectByCode=(errors,code)=>errors?errors.find(err=>err.code===code):null;async function verifyToken(token,options){const{data:decodedResult,errors}=decodeJwt(token);if(errors)return{errors};const{header}=decodedResult,{kid}=header;try{let key;if(options.jwtKey)key=loadClerkJWKFromLocal(options.jwtKey);else{if(!options.secretKey)return{errors:[new TokenVerificationError({action:TokenVerificationErrorAction_SetClerkJWTKey,message:"Failed to resolve JWK during verification.",reason:TokenVerificationErrorReason.JWKFailedToResolve})]};key=await loadClerkJWKFromRemote({...options,kid})}return await verifyJwt(token,{...options,key})}catch(error){return{errors:[error]}}}function handleClerkAPIError(tokenType,err,notFoundMessage){if((0,dist_error.kD)(err)){let code,message;switch(err.status){case 401:code=MachineTokenVerificationErrorCode_InvalidSecretKey,message=err.errors[0]?.message||"Invalid secret key";break;case 404:code=MachineTokenVerificationErrorCode_TokenInvalid,message=notFoundMessage;break;default:code=MachineTokenVerificationErrorCode_UnexpectedError,message="Unexpected error"}return{data:void 0,tokenType,errors:[new MachineTokenVerificationError({message,code,status:err.status})]}}return{data:void 0,tokenType,errors:[new MachineTokenVerificationError({message:"Unexpected error",code:MachineTokenVerificationErrorCode_UnexpectedError,status:err.status})]}}async function verifyMachineAuthToken(token,options){if(token.startsWith("mt_"))return async function verifyMachineToken(secret,options){try{const client=createBackendApiClient(options);return{data:await client.m2mTokens.verifySecret({secret}),tokenType:TokenType_M2MToken,errors:void 0}}catch(err){return handleClerkAPIError(TokenType_M2MToken,err,"Machine token not found")}}(token,options);if(token.startsWith("oat_"))return async function verifyOAuthToken(accessToken,options){try{const client=createBackendApiClient(options);return{data:await client.idPOAuthAccessToken.verifyAccessToken(accessToken),tokenType:TokenType_OAuthToken,errors:void 0}}catch(err){return handleClerkAPIError(TokenType_OAuthToken,err,"OAuth token not found")}}(token,options);if(token.startsWith("ak_"))return async function verifyAPIKey(secret,options){try{const client=createBackendApiClient(options);return{data:await client.apiKeys.verifySecret(secret),tokenType:TokenType_ApiKey,errors:void 0}}catch(err){return handleClerkAPIError(TokenType_ApiKey,err,"API key not found")}}(token,options);throw new Error("Unknown machine token type")}async function verifyHandshakeToken(token,options){const{secretKey,apiUrl,apiVersion,jwksCacheTtlInMs,jwtKey,skipJwksCache}=options,{data,errors}=decodeJwt(token);if(errors)throw errors[0];const{kid}=data.header;let key;if(jwtKey)key=loadClerkJWKFromLocal(jwtKey);else{if(!secretKey)throw new TokenVerificationError({action:TokenVerificationErrorAction_SetClerkJWTKey,message:"Failed to resolve JWK during handshake verification.",reason:TokenVerificationErrorReason.JWKFailedToResolve});key=await loadClerkJWKFromRemote({secretKey,apiUrl,apiVersion,kid,jwksCacheTtlInMs,skipJwksCache})}return await async function verifyHandshakeJwt(token,{key}){const{data:decoded,errors}=decodeJwt(token);if(errors)throw errors[0];const{header,payload}=decoded,{typ,alg}=header;assertHeaderType(typ),assertHeaderAlgorithm(alg);const{data:signatureValid,errors:signatureErrors}=await hasValidSignature(decoded,key);if(signatureErrors)throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenVerificationFailed,message:`Error verifying handshake token. ${signatureErrors[0]}`});if(!signatureValid)throw new TokenVerificationError({reason:TokenVerificationErrorReason.TokenInvalidSignature,message:"Handshake signature is invalid."});return payload}(token,{key})}var HandshakeService=class{constructor(authenticateContext,options,organizationMatcher){this.authenticateContext=authenticateContext,this.options=options,this.organizationMatcher=organizationMatcher}isRequestEligibleForHandshake(){const{accept,secFetchDest}=this.authenticateContext;return"document"===secFetchDest||"iframe"===secFetchDest||!(secFetchDest||!accept?.startsWith("text/html"))}buildRedirectToHandshake(reason){if(!this.authenticateContext?.clerkUrl)throw new Error("Missing clerkUrl in authenticateContext");const redirectUrl=this.removeDevBrowserFromURL(this.authenticateContext.clerkUrl);let baseUrl=this.authenticateContext.frontendApi.startsWith("http")?this.authenticateContext.frontendApi:`https://${this.authenticateContext.frontendApi}`;baseUrl=baseUrl.replace(/\/+$/,"")+"/";const url=new URL("v1/client/handshake",baseUrl);url.searchParams.append("redirect_url",redirectUrl?.href||""),url.searchParams.append("__clerk_api_version","2025-04-10"),url.searchParams.append(constants.QueryParameters.SuffixedCookies,this.authenticateContext.usesSuffixedCookies().toString()),url.searchParams.append(constants.QueryParameters.HandshakeReason,reason),url.searchParams.append(constants.QueryParameters.HandshakeFormat,"nonce"),"development"===this.authenticateContext.instanceType&&this.authenticateContext.devBrowserToken&&url.searchParams.append(constants.QueryParameters.DevBrowser,this.authenticateContext.devBrowserToken);const toActivate=this.getOrganizationSyncTarget(this.authenticateContext.clerkUrl,this.organizationMatcher);if(toActivate){this.getOrganizationSyncQueryParams(toActivate).forEach((value,key)=>{url.searchParams.append(key,value)})}return new Headers({[constants.Headers.Location]:url.href})}async getCookiesFromHandshake(){const cookiesToSet=[];if(this.authenticateContext.handshakeNonce)try{const handshakePayload=await(this.authenticateContext.apiClient?.clients.getHandshakePayload({nonce:this.authenticateContext.handshakeNonce}));handshakePayload&&cookiesToSet.push(...handshakePayload.directives)}catch(error){console.error("Clerk: HandshakeService: error getting handshake payload:",error)}else if(this.authenticateContext.handshakeToken){const handshakePayload=await verifyHandshakeToken(this.authenticateContext.handshakeToken,this.authenticateContext);handshakePayload&&Array.isArray(handshakePayload.handshake)&&cookiesToSet.push(...handshakePayload.handshake)}return cookiesToSet}async resolveHandshake(){const headers=new Headers({"Access-Control-Allow-Origin":"null","Access-Control-Allow-Credentials":"true"}),cookiesToSet=await this.getCookiesFromHandshake();let sessionToken="";if(cookiesToSet.forEach(x=>{headers.append("Set-Cookie",x),getCookieName(x).startsWith(constants.Cookies.Session)&&(sessionToken=getCookieValue(x))}),"development"===this.authenticateContext.instanceType){const newUrl=new URL(this.authenticateContext.clerkUrl);newUrl.searchParams.delete(constants.QueryParameters.Handshake),newUrl.searchParams.delete(constants.QueryParameters.HandshakeHelp),headers.append(constants.Headers.Location,newUrl.toString()),headers.set(constants.Headers.CacheControl,"no-store")}if(""===sessionToken)return signedOut({tokenType:TokenType_SessionToken,authenticateContext:this.authenticateContext,reason:AuthErrorReason_SessionTokenMissing,message:"",headers});const{data,errors:[error]=[]}=await verifyToken(sessionToken,this.authenticateContext);if(data)return signedIn({tokenType:TokenType_SessionToken,authenticateContext:this.authenticateContext,sessionClaims:data,headers,token:sessionToken});if("development"===this.authenticateContext.instanceType&&(error?.reason===TokenVerificationErrorReason.TokenExpired||error?.reason===TokenVerificationErrorReason.TokenNotActiveYet||error?.reason===TokenVerificationErrorReason.TokenIatInTheFuture)){const developmentError=new TokenVerificationError({action:error.action,message:error.message,reason:error.reason});developmentError.tokenCarrier="cookie",console.error(`Clerk: Clock skew detected. This usually means that your system clock is inaccurate. Clerk will attempt to account for the clock skew in development.\n\nTo resolve this issue, make sure your system's clock is set to the correct time (e.g. turn off and on automatic time synchronization).\n\n---\n\n${developmentError.getFullMessage()}`);const{data:retryResult,errors:[retryError]=[]}=await verifyToken(sessionToken,{...this.authenticateContext,clockSkewInMs:864e5});if(retryResult)return signedIn({tokenType:TokenType_SessionToken,authenticateContext:this.authenticateContext,sessionClaims:retryResult,headers,token:sessionToken});throw new Error(retryError?.message||"Clerk: Handshake retry failed.")}throw new Error(error?.message||"Clerk: Handshake failed.")}handleTokenVerificationErrorInDevelopment(error){if(error.reason===TokenVerificationErrorReason.TokenInvalidSignature){throw new Error("Clerk: Handshake token verification failed due to an invalid signature. If you have switched Clerk keys locally, clear your cookies and try again.")}throw new Error(`Clerk: Handshake token verification failed: ${error.getFullMessage()}.`)}checkAndTrackRedirectLoop(headers){if(3===this.authenticateContext.handshakeRedirectLoopCounter)return!0;const newCounterValue=this.authenticateContext.handshakeRedirectLoopCounter+1,cookieName=constants.Cookies.RedirectCount;return headers.append("Set-Cookie",`${cookieName}=${newCounterValue}; SameSite=Lax; HttpOnly; Max-Age=3`),!1}removeDevBrowserFromURL(url){const updatedURL=new URL(url);return updatedURL.searchParams.delete(constants.QueryParameters.DevBrowser),updatedURL.searchParams.delete(constants.QueryParameters.LegacyDevBrowser),updatedURL}getOrganizationSyncTarget(url,matchers){return matchers.findTarget(url)}getOrganizationSyncQueryParams(toActivate){const ret=new Map;return"personalAccount"===toActivate.type&&ret.set("organization_id",""),"organization"===toActivate.type&&(toActivate.organizationId&&ret.set("organization_id",toActivate.organizationId),toActivate.organizationSlug&&ret.set("organization_id",toActivate.organizationSlug)),ret}},OrganizationMatcher=class{constructor(options){this.organizationPattern=this.createMatcher(options?.organizationPatterns),this.personalAccountPattern=this.createMatcher(options?.personalAccountPatterns)}createMatcher(pattern){if(!pattern)return null;try{return function match(str,options){try{return H(str,options)}catch(e){throw new Error(`Invalid path and options: Consult the documentation of path-to-regexp here: https://github.com/pillarjs/path-to-regexp/tree/6.x\n${e.message}`)}}(pattern)}catch(e){throw new Error(`Invalid pattern "${pattern}": ${e}`)}}findTarget(url){const orgTarget=this.findOrganizationTarget(url);return orgTarget||this.findPersonalAccountTarget(url)}findOrganizationTarget(url){if(!this.organizationPattern)return null;try{const result=this.organizationPattern(url.pathname);if(!result||!("params"in result))return null;const params=result.params;return params.id?{type:"organization",organizationId:params.id}:params.slug?{type:"organization",organizationSlug:params.slug}:null}catch(e){return console.error("Failed to match organization pattern:",e),null}}findPersonalAccountTarget(url){if(!this.personalAccountPattern)return null;try{return this.personalAccountPattern(url.pathname)?{type:"personalAccount"}:null}catch(e){return console.error("Failed to match personal account pattern:",e),null}}},RefreshTokenErrorReason_NonEligibleNoCookie="non-eligible-no-refresh-cookie",RefreshTokenErrorReason_NonEligibleNonGet="non-eligible-non-get",RefreshTokenErrorReason_InvalidSessionToken="invalid-session-token",RefreshTokenErrorReason_MissingApiClient="missing-api-client",RefreshTokenErrorReason_MissingSessionToken="missing-session-token",RefreshTokenErrorReason_MissingRefreshToken="missing-refresh-token",RefreshTokenErrorReason_ExpiredSessionTokenDecodeFailed="expired-session-token-decode-failed",RefreshTokenErrorReason_ExpiredSessionTokenMissingSidClaim="expired-session-token-missing-sid-claim",RefreshTokenErrorReason_FetchError="fetch-error",RefreshTokenErrorReason_UnexpectedSDKError="unexpected-sdk-error",RefreshTokenErrorReason_UnexpectedBAPIError="unexpected-bapi-error";function checkTokenTypeMismatch(parsedTokenType,acceptsToken,authenticateContext){if(!isTokenTypeAccepted(parsedTokenType,acceptsToken)){return signedOut({tokenType:"string"==typeof acceptsToken?acceptsToken:parsedTokenType,authenticateContext,reason:AuthErrorReason_TokenTypeMismatch})}return null}var authenticateRequest=async(request,options)=>{const authenticateContext=await(async(clerkRequest,options)=>{const cookieSuffix=options.publishableKey?await(0,keys.P)(options.publishableKey,runtime.crypto.subtle):"";return new AuthenticateContext(cookieSuffix,clerkRequest,options)})(((...args)=>args[0]instanceof ClerkRequest?args[0]:new ClerkRequest(...args))(request),options),acceptsToken=options.acceptsToken??TokenType_SessionToken;acceptsToken!==TokenType_M2MToken&&(assertValidSecretKey(authenticateContext.secretKey),authenticateContext.isSatellite&&(!function assertSignInUrlExists(signInUrl,key){if(!signInUrl&&(0,keys.CY)(key))throw new Error("Missing signInUrl. Pass a signInUrl for dev instances if an app is satellite")}(authenticateContext.signInUrl,authenticateContext.secretKey),authenticateContext.signInUrl&&authenticateContext.origin&&function assertSignInUrlFormatAndOrigin(_signInUrl,origin){let signInUrl;try{signInUrl=new URL(_signInUrl)}catch{throw new Error("The signInUrl needs to have a absolute url format.")}if(signInUrl.origin===origin)throw new Error("The signInUrl needs to be on a different origin than your satellite application.")}(authenticateContext.signInUrl,authenticateContext.origin),function assertProxyUrlOrDomain(proxyUrlOrDomain){if(!proxyUrlOrDomain)throw new Error("Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl")}(authenticateContext.proxyUrl||authenticateContext.domain))),acceptsToken===TokenType_M2MToken&&function assertMachineSecretOrSecretKey(authenticateContext){if(!authenticateContext.machineSecretKey&&!authenticateContext.secretKey)throw new Error("Machine token authentication requires either a Machine secret key or a Clerk secret key. Ensure a Clerk secret key or Machine secret key is set.")}(authenticateContext);const organizationMatcher=new OrganizationMatcher(options.organizationSyncOptions),handshakeService=new HandshakeService(authenticateContext,{organizationSyncOptions:options.organizationSyncOptions},organizationMatcher);async function attemptRefresh(authenticateContext2){const{data:cookiesToSet,error}=await async function refreshToken(authenticateContext2){if(!options.apiClient)return{data:null,error:{message:"An apiClient is needed to perform token refresh.",cause:{reason:RefreshTokenErrorReason_MissingApiClient}}};const{sessionToken:expiredSessionToken,refreshTokenInCookie:refreshToken2}=authenticateContext2;if(!expiredSessionToken)return{data:null,error:{message:"Session token must be provided.",cause:{reason:RefreshTokenErrorReason_MissingSessionToken}}};if(!refreshToken2)return{data:null,error:{message:"Refresh token must be provided.",cause:{reason:RefreshTokenErrorReason_MissingRefreshToken}}};const{data:decodeResult,errors:decodedErrors}=decodeJwt(expiredSessionToken);if(!decodeResult||decodedErrors)return{data:null,error:{message:"Unable to decode the expired session token.",cause:{reason:RefreshTokenErrorReason_ExpiredSessionTokenDecodeFailed,errors:decodedErrors}}};if(!decodeResult?.payload?.sid)return{data:null,error:{message:"Expired session token is missing the `sid` claim.",cause:{reason:RefreshTokenErrorReason_ExpiredSessionTokenMissingSidClaim}}};try{return{data:(await options.apiClient.sessions.refreshSession(decodeResult.payload.sid,{format:"cookie",suffixed_cookies:authenticateContext2.usesSuffixedCookies(),expired_token:expiredSessionToken||"",refresh_token:refreshToken2||"",request_origin:authenticateContext2.clerkUrl.origin,request_headers:Object.fromEntries(Array.from(request.headers.entries()).map(([k,v])=>[k,[v]]))})).cookies,error:null}}catch(err){return err?.errors?.length?"unexpected_error"===err.errors[0].code?{data:null,error:{message:"Fetch unexpected error",cause:{reason:RefreshTokenErrorReason_FetchError,errors:err.errors}}}:{data:null,error:{message:err.errors[0].code,cause:{reason:err.errors[0].code,errors:err.errors}}}:{data:null,error:{message:"Unexpected Server/BAPI error",cause:{reason:RefreshTokenErrorReason_UnexpectedBAPIError,errors:[err]}}}}}(authenticateContext2);if(!cookiesToSet||0===cookiesToSet.length)return{data:null,error};const headers=new Headers;let sessionToken="";cookiesToSet.forEach(x=>{headers.append("Set-Cookie",x),getCookieName(x).startsWith(constants.Cookies.Session)&&(sessionToken=getCookieValue(x))});const{data:jwtPayload,errors}=await verifyToken(sessionToken,authenticateContext2);return errors?{data:null,error:{message:"Clerk: unable to verify refreshed session token.",cause:{reason:RefreshTokenErrorReason_InvalidSessionToken,errors}}}:{data:{jwtPayload,sessionToken,headers},error:null}}function handleMaybeHandshakeStatus(authenticateContext2,reason,message,headers){if(!handshakeService.isRequestEligibleForHandshake())return signedOut({tokenType:TokenType_SessionToken,authenticateContext:authenticateContext2,reason,message});const handshakeHeaders=headers??handshakeService.buildRedirectToHandshake(reason);handshakeHeaders.get(constants.Headers.Location)&&handshakeHeaders.set(constants.Headers.CacheControl,"no-store");if(handshakeService.checkAndTrackRedirectLoop(handshakeHeaders)){const msg="Clerk: Refreshing the session token resulted in an infinite redirect loop. This usually means that your Clerk instance keys do not match - make sure to copy the correct publishable and secret keys from the Clerk dashboard.";return console.log(msg),signedOut({tokenType:TokenType_SessionToken,authenticateContext:authenticateContext2,reason,message})}return function handshake(authenticateContext,reason,message="",headers){return withDebugHeaders({status:AuthStatus_Handshake,reason,message,publishableKey:authenticateContext.publishableKey||"",isSatellite:authenticateContext.isSatellite||!1,domain:authenticateContext.domain||"",proxyUrl:authenticateContext.proxyUrl||"",signInUrl:authenticateContext.signInUrl||"",signUpUrl:authenticateContext.signUpUrl||"",afterSignInUrl:authenticateContext.afterSignInUrl||"",afterSignUpUrl:authenticateContext.afterSignUpUrl||"",isSignedIn:!1,isAuthenticated:!1,tokenType:TokenType_SessionToken,toAuth:()=>null,headers,token:null})}(authenticateContext2,reason,message,handshakeHeaders)}async function handleSessionTokenError(err,tokenCarrier){if(!(err instanceof TokenVerificationError))return signedOut({tokenType:TokenType_SessionToken,authenticateContext,reason:AuthErrorReason_UnexpectedError});let refreshError;if(function isRequestEligibleForRefresh(err,authenticateContext,request){return err.reason===TokenVerificationErrorReason.TokenExpired&&!!authenticateContext.refreshTokenInCookie&&"GET"===request.method}(err,authenticateContext,request)){const{data,error}=await attemptRefresh(authenticateContext);if(data)return signedIn({tokenType:TokenType_SessionToken,authenticateContext,sessionClaims:data.jwtPayload,headers:data.headers,token:data.sessionToken});refreshError=error?.cause?.reason?error.cause.reason:RefreshTokenErrorReason_UnexpectedSDKError}else refreshError="GET"!==request.method?RefreshTokenErrorReason_NonEligibleNonGet:authenticateContext.refreshTokenInCookie?null:RefreshTokenErrorReason_NonEligibleNoCookie;err.tokenCarrier=tokenCarrier;return[TokenVerificationErrorReason.TokenExpired,TokenVerificationErrorReason.TokenNotActiveYet,TokenVerificationErrorReason.TokenIatInTheFuture].includes(err.reason)?handleMaybeHandshakeStatus(authenticateContext,convertTokenVerificationErrorReasonToAuthErrorReason({tokenError:err.reason,refreshError}),err.getFullMessage()):signedOut({tokenType:TokenType_SessionToken,authenticateContext,reason:err.reason,message:err.getFullMessage()})}function handleMachineError(tokenType,err){return signedOut(err instanceof MachineTokenVerificationError?{tokenType,authenticateContext,reason:err.code,message:err.getFullMessage()}:{tokenType,authenticateContext,reason:AuthErrorReason_UnexpectedError})}return Array.isArray(acceptsToken)&&!function isTokenTypeInAcceptedArray(acceptsToken,authenticateContext){let parsedTokenType=null;const{tokenInHeader}=authenticateContext;return tokenInHeader&&(parsedTokenType=isMachineTokenByPrefix(tokenInHeader)?getMachineTokenType(tokenInHeader):TokenType_SessionToken),isTokenTypeAccepted(parsedTokenType??TokenType_SessionToken,acceptsToken)}(acceptsToken,authenticateContext)?function signedOutInvalidToken(){const authObject=invalidTokenAuthObject();return withDebugHeaders({status:AuthStatus_SignedOut,reason:AuthErrorReason_TokenTypeMismatch,message:"",proxyUrl:"",publishableKey:"",isSatellite:!1,domain:"",signInUrl:"",signUpUrl:"",afterSignInUrl:"",afterSignUpUrl:"",isSignedIn:!1,isAuthenticated:!1,tokenType:null,toAuth:()=>authObject,headers:new Headers,token:null})}():authenticateContext.tokenInHeader?"any"===acceptsToken?async function authenticateAnyRequestWithTokenInHeader(){const{tokenInHeader}=authenticateContext;if(!tokenInHeader)return handleSessionTokenError(new Error("Missing token in header"),"header");if(isMachineTokenByPrefix(tokenInHeader)){const mismatchState=checkTokenTypeMismatch(getMachineTokenType(tokenInHeader),acceptsToken,authenticateContext);if(mismatchState)return mismatchState;const{data:data2,tokenType,errors:errors2}=await verifyMachineAuthToken(tokenInHeader,authenticateContext);return errors2?handleMachineError(tokenType,errors2[0]):signedIn({tokenType,authenticateContext,machineData:data2,token:tokenInHeader})}const{data,errors}=await verifyToken(tokenInHeader,authenticateContext);return errors?handleSessionTokenError(errors[0],"header"):signedIn({tokenType:TokenType_SessionToken,authenticateContext,sessionClaims:data,token:tokenInHeader})}():acceptsToken===TokenType_SessionToken?async function authenticateRequestWithTokenInHeader(){const{tokenInHeader}=authenticateContext;try{const{data,errors}=await verifyToken(tokenInHeader,authenticateContext);if(errors)throw errors[0];return signedIn({tokenType:TokenType_SessionToken,authenticateContext,sessionClaims:data,headers:new Headers,token:tokenInHeader})}catch(err){return handleSessionTokenError(err,"header")}}():async function authenticateMachineRequestWithTokenInHeader(){const{tokenInHeader}=authenticateContext;if(!tokenInHeader)return handleSessionTokenError(new Error("Missing token in header"),"header");if(!isMachineTokenByPrefix(tokenInHeader))return signedOut({tokenType:acceptsToken,authenticateContext,reason:AuthErrorReason_TokenTypeMismatch,message:""});const mismatchState=checkTokenTypeMismatch(getMachineTokenType(tokenInHeader),acceptsToken,authenticateContext);if(mismatchState)return mismatchState;const{data,tokenType,errors}=await verifyMachineAuthToken(tokenInHeader,authenticateContext);return errors?handleMachineError(tokenType,errors[0]):signedIn({tokenType,authenticateContext,machineData:data,token:tokenInHeader})}():acceptsToken===TokenType_OAuthToken||acceptsToken===TokenType_ApiKey||acceptsToken===TokenType_M2MToken?signedOut({tokenType:acceptsToken,authenticateContext,reason:"No token in header"}):async function authenticateRequestWithTokenInCookie(){const hasActiveClient=authenticateContext.clientUat,hasSessionToken=!!authenticateContext.sessionTokenInCookie,hasDevBrowserToken=!!authenticateContext.devBrowserToken;if(authenticateContext.handshakeNonce||authenticateContext.handshakeToken)try{return await handshakeService.resolveHandshake()}catch(error){error instanceof TokenVerificationError&&"development"===authenticateContext.instanceType?handshakeService.handleTokenVerificationErrorInDevelopment(error):console.error("Clerk: unable to resolve handshake:",error)}if("development"===authenticateContext.instanceType&&authenticateContext.clerkUrl.searchParams.has(constants.QueryParameters.DevBrowser))return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_DevBrowserSync,"");const isRequestEligibleForMultiDomainSync=authenticateContext.isSatellite&&"document"===authenticateContext.secFetchDest;if("production"===authenticateContext.instanceType&&isRequestEligibleForMultiDomainSync)return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_SatelliteCookieNeedsSyncing,"");if("development"===authenticateContext.instanceType&&isRequestEligibleForMultiDomainSync&&!authenticateContext.clerkUrl.searchParams.has(constants.QueryParameters.ClerkSynced)){const redirectURL=new URL(authenticateContext.signInUrl);redirectURL.searchParams.append(constants.QueryParameters.ClerkRedirectUrl,authenticateContext.clerkUrl.toString());const headers=new Headers({[constants.Headers.Location]:redirectURL.toString()});return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_SatelliteCookieNeedsSyncing,"",headers)}const redirectUrl=new URL(authenticateContext.clerkUrl).searchParams.get(constants.QueryParameters.ClerkRedirectUrl);if("development"===authenticateContext.instanceType&&!authenticateContext.isSatellite&&redirectUrl){const redirectBackToSatelliteUrl=new URL(redirectUrl);authenticateContext.devBrowserToken&&redirectBackToSatelliteUrl.searchParams.append(constants.QueryParameters.DevBrowser,authenticateContext.devBrowserToken),redirectBackToSatelliteUrl.searchParams.append(constants.QueryParameters.ClerkSynced,"true");const headers=new Headers({[constants.Headers.Location]:redirectBackToSatelliteUrl.toString()});return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_PrimaryRespondsToSyncing,"",headers)}if("development"===authenticateContext.instanceType&&!hasDevBrowserToken)return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_DevBrowserMissing,"");if(!hasActiveClient&&!hasSessionToken)return signedOut({tokenType:TokenType_SessionToken,authenticateContext,reason:AuthErrorReason_SessionTokenAndUATMissing});if(!hasActiveClient&&hasSessionToken)return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_SessionTokenWithoutClientUAT,"");if(hasActiveClient&&!hasSessionToken)return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_ClientUATWithoutSessionToken,"");const{data:decodeResult,errors:decodedErrors}=decodeJwt(authenticateContext.sessionTokenInCookie);if(decodedErrors)return handleSessionTokenError(decodedErrors[0],"cookie");if(decodeResult.payload.iat<authenticateContext.clientUat)return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_SessionTokenIATBeforeClientUAT,"");try{const{data,errors}=await verifyToken(authenticateContext.sessionTokenInCookie,authenticateContext);if(errors)throw errors[0];const signedInRequestState=signedIn({tokenType:TokenType_SessionToken,authenticateContext,sessionClaims:data,headers:new Headers,token:authenticateContext.sessionTokenInCookie});if(!authenticateContext.isSatellite&&"document"===authenticateContext.secFetchDest&&authenticateContext.isCrossOriginReferrer())return handleMaybeHandshakeStatus(authenticateContext,AuthErrorReason_PrimaryDomainCrossOriginSync,"Cross-origin request from satellite domain requires handshake");const authObject=signedInRequestState.toAuth();if(authObject.userId){const handshakeRequestState=function handleMaybeOrganizationSyncHandshake(authenticateContext2,auth){const organizationSyncTarget=organizationMatcher.findTarget(authenticateContext2.clerkUrl);if(!organizationSyncTarget)return null;let mustActivate=!1;if("organization"===organizationSyncTarget.type&&(organizationSyncTarget.organizationSlug&&organizationSyncTarget.organizationSlug!==auth.orgSlug&&(mustActivate=!0),organizationSyncTarget.organizationId&&organizationSyncTarget.organizationId!==auth.orgId&&(mustActivate=!0)),"personalAccount"===organizationSyncTarget.type&&auth.orgId&&(mustActivate=!0),!mustActivate)return null;if(authenticateContext2.handshakeRedirectLoopCounter>0)return console.warn("Clerk: Organization activation handshake loop detected. This is likely due to an invalid organization ID or slug. Skipping organization activation."),null;const handshakeState=handleMaybeHandshakeStatus(authenticateContext2,AuthErrorReason_ActiveOrganizationMismatch,"");return"handshake"!==handshakeState.status?null:handshakeState}(authenticateContext,authObject);if(handshakeRequestState)return handshakeRequestState}return signedInRequestState}catch(err){return handleSessionTokenError(err,"cookie")}return signedOut({tokenType:TokenType_SessionToken,authenticateContext,reason:AuthErrorReason_UnexpectedError})}()},debugRequestState=params=>{const{isSignedIn,isAuthenticated,proxyUrl,reason,message,publishableKey,isSatellite,domain}=params;return{isSignedIn,isAuthenticated,proxyUrl,reason,message,publishableKey,isSatellite,domain}},convertTokenVerificationErrorReasonToAuthErrorReason=({tokenError,refreshError})=>{switch(tokenError){case TokenVerificationErrorReason.TokenExpired:return`${AuthErrorReason_SessionTokenExpired}-refresh-${refreshError}`;case TokenVerificationErrorReason.TokenNotActiveYet:return AuthErrorReason_SessionTokenNBF;case TokenVerificationErrorReason.TokenIatInTheFuture:return AuthErrorReason_SessionTokenIatInTheFuture;default:return AuthErrorReason_UnexpectedError}},defaultOptions={secretKey:"",machineSecretKey:"",jwtKey:"",apiUrl:void 0,apiVersion:void 0,proxyUrl:"",publishableKey:"",isSatellite:!1,domain:"",audience:""};var dist_telemetry=__webpack_require__("./node_modules/@clerk/shared/dist/telemetry.mjs");(function withLegacyReturn(cb){return async(...args)=>{const{data,errors}=await cb(...args);if(errors)throw errors[0];return data}})(verifyToken);function createClerkClient(options){const opts={...options},apiClient=createBackendApiClient(opts),requestState=function createAuthenticateRequest(params){const buildTimeOptions=mergePreDefinedOptions(defaultOptions,params.options),apiClient=params.apiClient;return{authenticateRequest:(request,options={})=>{const{apiUrl,apiVersion}=buildTimeOptions,runTimeOptions=mergePreDefinedOptions(buildTimeOptions,options);return authenticateRequest(request,{...options,...runTimeOptions,apiUrl,apiVersion,apiClient})},debugRequestState}}({options:opts,apiClient}),telemetry=new dist_telemetry.NS({...options.telemetry,publishableKey:opts.publishableKey,secretKey:opts.secretKey,samplingRate:.1,...opts.sdkMetadata?{sdk:opts.sdkMetadata.name,sdkVersion:opts.sdkMetadata.version}:{}});return{...apiClient,...requestState,telemetry}}var server_constants=__webpack_require__("./node_modules/@clerk/nextjs/dist/esm/server/constants.js");const clerkClientDefaultOptions={secretKey:server_constants.Cn,publishableKey:server_constants.Am,apiUrl:server_constants.T5,apiVersion:server_constants.Gn,userAgent:"@clerk/nextjs@6.30.0",proxyUrl:server_constants.NM,domain:server_constants.yK,isSatellite:server_constants.lo,machineSecretKey:server_constants.v$,sdkMetadata:server_constants.nE,telemetry:{disabled:server_constants.CY,debug:server_constants.w4}},createClerkClientWithOptions=options=>createClerkClient({...clerkClientDefaultOptions,...options});var cb,mod,__getOwnPropNames=Object.getOwnPropertyNames;const safe_node_apis=(cb={"src/runtime/browser/safe-node-apis.js"(exports,module){module.exports={fs:void 0,path:void 0,cwd:void 0}}},function __require(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports})(),throwMissingFsModule=module=>{throw new Error(`Clerk: ${module} is missing. This is an internal error. Please contact Clerk's support.`)},nodeFsOrThrow=()=>(safe_node_apis.fs||throwMissingFsModule("fs"),safe_node_apis.fs),nodePathOrThrow=()=>(safe_node_apis.path||throwMissingFsModule("path"),safe_node_apis.path),nodeCwdOrThrow=()=>(safe_node_apis.cwd||throwMissingFsModule("cwd"),safe_node_apis.cwd);var headers=__webpack_require__("./node_modules/@storybook/nextjs/dist/export-mocks/headers/index.mjs"),process=__webpack_require__("./node_modules/process/browser.js");function getNextVersion(){var _a;try{return null!=(_a=process.title)?_a:"unknown-process-title"}catch{return}}function formatMetadataHeaders(metadata){const headers2=new Headers;return metadata.nodeVersion&&headers2.set("Clerk-Node-Version",metadata.nodeVersion),metadata.nextVersion&&headers2.set("Clerk-Next-Version",metadata.nextVersion),metadata.npmConfigUserAgent&&headers2.set("Clerk-NPM-Config-User-Agent",metadata.npmConfigUserAgent),metadata.userAgent&&headers2.set("Clerk-Client-User-Agent",metadata.userAgent),headers2}const CLERK_HIDDEN=".clerk";const generatePath=(...slugs)=>{const path=nodePathOrThrow(),cwd=nodeCwdOrThrow();return path.join(cwd(),CLERK_HIDDEN,...slugs)},_TEMP_DIR_NAME=".tmp",getKeylessConfigurationPath=()=>generatePath(_TEMP_DIR_NAME,"keyless.json"),getKeylessReadMePath=()=>generatePath(_TEMP_DIR_NAME,"README.md");let isCreatingFile=!1;function safeParseClerkFile(){const{readFileSync}=nodeFsOrThrow();try{const CONFIG_PATH=getKeylessConfigurationPath();let fileAsString;try{fileAsString=readFileSync(CONFIG_PATH,{encoding:"utf-8"})||"{}"}catch{fileAsString="{}"}return JSON.parse(fileAsString)}catch{return}}const lockFileWriting=()=>{const{writeFileSync}=nodeFsOrThrow();isCreatingFile=!0,writeFileSync("clerk.lock","This file can be deleted. Please delete this file and refresh your application",{encoding:"utf8",mode:"0777",flag:"w"})},unlockFileWriting=()=>{const{rmSync}=nodeFsOrThrow();try{rmSync("clerk.lock",{force:!0,recursive:!0})}catch{}isCreatingFile=!1},isFileWritingLocked=()=>{const{existsSync}=nodeFsOrThrow();return isCreatingFile||existsSync("clerk.lock")};async function createOrReadKeyless(){const{writeFileSync,mkdirSync}=nodeFsOrThrow();if(isFileWritingLocked())return null;lockFileWriting();const CONFIG_PATH=getKeylessConfigurationPath(),README_PATH=getKeylessReadMePath();mkdirSync(generatePath(_TEMP_DIR_NAME),{recursive:!0}),function updateGitignore(){const{existsSync,writeFileSync,readFileSync,appendFileSync}=nodeFsOrThrow(),path=nodePathOrThrow(),cwd=nodeCwdOrThrow(),gitignorePath=path.join(cwd(),".gitignore");existsSync(gitignorePath)||writeFileSync(gitignorePath,""),readFileSync(gitignorePath,"utf-8").includes(CLERK_HIDDEN+"/")||appendFileSync(gitignorePath,`\n# clerk configuration (can include secrets)\n/${CLERK_HIDDEN}/\n`)}();const envVarsMap=safeParseClerkFile();if((null==envVarsMap?void 0:envVarsMap.publishableKey)&&(null==envVarsMap?void 0:envVarsMap.secretKey))return unlockFileWriting(),envVarsMap;const client=createClerkClientWithOptions({}),keylessHeaders=await async function collectKeylessMetadata(){var _a;const headerStore=await(0,headers.headers)();return{nodeVersion:process.version,nextVersion:getNextVersion(),npmConfigUserAgent:process.env.npm_config_user_agent,userAgent:null!=(_a=headerStore.get("User-Agent"))?_a:void 0}}().then(formatMetadataHeaders).catch(()=>new Headers),accountlessApplication=await client.__experimental_accountlessApplications.createAccountlessApplication({requestHeaders:keylessHeaders}).catch(()=>null);if(accountlessApplication){writeFileSync(CONFIG_PATH,JSON.stringify(accountlessApplication),{encoding:"utf8",mode:"0777",flag:"w"});writeFileSync(README_PATH,"\n## DO NOT COMMIT\nThis directory is auto-generated from `@clerk/nextjs` because you are running in Keyless mode. Avoid committing the `.clerk/` directory as it includes the secret key of the unclaimed instance.\n  ",{encoding:"utf8",mode:"0777",flag:"w"})}return unlockFileWriting(),accountlessApplication}function removeKeyless(){const{rmSync}=nodeFsOrThrow();if(!isFileWritingLocked()){lockFileWriting();try{rmSync(generatePath(),{force:!0,recursive:!0})}catch{}unlockFileWriting()}}},"./node_modules/cookie/dist/index.js":(__unused_webpack_module,exports)=>{exports.Qc=function parse(str,options){const obj=new NullObject,len=str.length;if(len<2)return obj;const dec=options?.decode||decode;let index=0;do{const eqIdx=str.indexOf("=",index);if(-1===eqIdx)break;const colonIdx=str.indexOf(";",index),endIdx=-1===colonIdx?len:colonIdx;if(eqIdx>endIdx){index=str.lastIndexOf(";",eqIdx-1)+1;continue}const keyStartIdx=startIndex(str,index,eqIdx),keyEndIdx=endIndex(str,eqIdx,keyStartIdx),key=str.slice(keyStartIdx,keyEndIdx);if(void 0===obj[key]){let valStartIdx=startIndex(str,eqIdx+1,endIdx),valEndIdx=endIndex(str,endIdx,valStartIdx);const value=dec(str.slice(valStartIdx,valEndIdx));obj[key]=value}index=endIdx+1}while(index<len);return obj};const cookieNameRegExp=/^[\u0021-\u003A\u003C\u003E-\u007E]+$/,cookieValueRegExp=/^[\u0021-\u003A\u003C-\u007E]*$/,domainValueRegExp=/^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i,pathValueRegExp=/^[\u0020-\u003A\u003D-\u007E]*$/,__toString=Object.prototype.toString,NullObject=(()=>{const C=function(){};return C.prototype=Object.create(null),C})();function startIndex(str,index,max){do{const code=str.charCodeAt(index);if(32!==code&&9!==code)return index}while(++index<max);return max}function endIndex(str,index,min){for(;index>min;){const code=str.charCodeAt(--index);if(32!==code&&9!==code)return index+1}return min}function decode(str){if(-1===str.indexOf("%"))return str;try{return decodeURIComponent(str)}catch(e){return str}}}}]);