openapi: 3.0.3
info:
  title: Fleetopia Agent Core API
  version: 1.0.0
paths:
  /score:
    post:
      summary: Compute EV grid, EV at anchor S, and optimal p*
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreOutput'
  /suggest:
    post:
      summary: Apply policy â‰¥ S to produce a recommendation or HOLD@S
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ScoreOutput'
                  - type: object
                    properties:
                      policy:
                        type: string
                      decision:
                        type: string
                        enum: [RECOMMEND, HOLD_AT_S]
                      price:
                        type: number
                      rationale:
                        type: array
                        items: { type: string }
components:
  schemas:
    Features:
      type: object
      properties:
        deadhead_km: { type: number }
        urgency_min: { type: number }
        lane_heat: { type: number }
        rel_score: { type: number }
        competition: { type: string, enum: [low, med, high] }
        urgency: { type: string, enum: [low, med, high] }
      required: [deadhead_km, urgency_min, lane_heat, rel_score, competition, urgency]
    ScoreInput:
      type: object
      properties:
        S: { type: number }
        M: { type: number }
        C: { type: number }
        beta: { type: number }
        f: { $ref: '#/components/schemas/Features' }
        config:
          type: object
          properties:
            gridMin: { type: number, default: 0.7 }
            gridMax: { type: number, default: 1.3 }
            gridStepPct: { type: number, default: 0.005 }
            tauByUrgency:
              type: object
              additionalProperties: { type: number }
      required: [S, M, C, f]
    ScoreOutput:
      type: object
      properties:
        EV_anchor: { type: number }
        EV_opt: { type: number }
        p_opt: { type: number }
        p_accept_at_S: { type: number }
        uplift_diff: { type: number }
        uplift_ratio: { type: number }
        tau_minutes: { type: number }
        grid_summary:
          type: array
          items:
            type: object
            properties:
              price: { type: number }
              p_accept: { type: number }
              EV: { type: number }
